(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{372:function(t,n,e){"use strict";var r=e(1),a=e.n(r);e(373);n.a=function(t){var n=t.children;return a.a.createElement("h2",{className:"title"},n)}},373:function(t,n,e){},375:function(t,n,e){"use strict";e.d(n,"e",(function(){return h})),e.d(n,"d",(function(){return g})),e.d(n,"b",(function(){return m})),e.d(n,"f",(function(){return y})),e.d(n,"c",(function(){return v})),e.d(n,"a",(function(){return b}));var r=e(103);function a(){var t=p(['\n  query getRegions {\n    Region(filter: { name_not: "Polar" }) {\n      _id,\n      name,\n      subregions {\n        _id\n        name\n        countries(filter: { population_gt: 1 }) {\n          _id,\n          population\n        }\n      }\n    }\n  }\n']);return a=function(){return t},t}function o(){var t=p(['\n  query getCountryBorders {\n    Country(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n      ...CountryData,\n      alpha3Code,\n      borders {\n        alpha3Code\n      }\n    }\n  }\n  ',"\n"]);return o=function(){return t},t}function i(){var t=p(['\n  query getTimezones {\n    Timezone {\n      _id,\n      name,\n      countries(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n        _id,\n        population\n      }\n    }\n  }\n']);return i=function(){return t},t}function u(){var t=p(['\n  query getCountriesArea {\n    Country(filter: { area_lt: 1500000, population_gt: 1, capital_not: "" }) {\n      ...CountryData,\n      area\n    }\n  }\n  ',"\n"]);return u=function(){return t},t}function c(){var t=p(['\n  query getCountriesDensity {\n      Country(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n      ...CountryData\n      alpha3Code,\n      density: populationDensity,\n      population,\n      area\n    }\n  }\n  ',"\n"]);return c=function(){return t},t}function s(){var t=p(["\n  query getCountriesByPopulation($orderBy:[_CountryOrdering]) {\n    Country(orderBy: $orderBy, first: 10, filter: { population_gte: 1 }) {\n      ...CountryData\n      population,\n      populationDensity\n    }\n  }\n  ","\n"]);return s=function(){return t},t}function l(){var t=p(["\n  query getCountryByName($name: String) {\n    Country(name: $name) {\n      area,\n      demonym,\n      name,\n      nativeName,\n      numericCode,\n      capital,\n      officialLanguages {\n        name\n      }\n      population,\n      populationDensity,\n      subregion {\n        name\n      },\n      borders {\n        name\n      }\n      timezones {\n        name\n      }\n    }\n  }\n"]);return l=function(){return t},t}function f(){var t=p(["\n  fragment CountryData on Country {\n    _id,\n    name\n  }\n"]);return f=function(){return t},t}function p(t,n){return n||(n=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(n)}}))}var d=Object(r.b)(f()),h=(Object(r.b)(l()),Object(r.b)(s(),d)),g=Object(r.b)(c(),d),m=Object(r.b)(u(),d),y=Object(r.b)(i()),v=Object(r.b)(o(),d),b=Object(r.b)(a())},376:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(374);function a(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var i=function(){function t(n,e,a){var i=e.margins,u=e.height,c=e.width;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,"svg",void 0),o(this,"margins",void 0),o(this,"width",void 0),o(this,"height",void 0),o(this,"xAxisGroup",void 0),o(this,"yAxisGroup",void 0),this.margins=i;var s=c||n.clientWidth,l=u||n.clientHeight,f=Math.max(s,1100),p=Math.max(l,a?1100:700);this.width=f-this.margins.left-this.margins.right,this.height=p-this.margins.top-this.margins.bottom,this.svg=r.r(n).append("svg").attr("viewBox","0 0 ".concat(f," ").concat(p)).attr("preserveAspectRatio","xMinYMin meet").append("g"),this.centerChart()}var n,e,i;return n=t,(e=[{key:"addAxisGroups",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t&&(this.xAxisGroup=this.svg.append("g").classed("axis-group",!0).classed("x-axis-group",!0).attr("transform","translate(0, ".concat(this.height,")"))),n&&(this.yAxisGroup=this.svg.append("g").classed("axis-group",!0).classed("y-axis-group",!0))}},{key:"centerChart",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.margins.left,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.margins.top;this.svg.attr("transform","translate(".concat(t,", ").concat(n,")"))}},{key:"wrap",value:function(t,n){t.each((function(){for(var t,e=r.r(this),a=e.text().split(/\s+/).reverse(),o=[],i=0,u=e.attr("y"),c=parseFloat(e.attr("dy")),s=e.text(null).append("tspan").attr("x",0).attr("y",u).attr("dy",c+"em");t=a.pop();)o.push(t),s.text(o.join(" ")),s.node().getComputedTextLength()>n&&(o.pop(),s.text(o.join(" ")),o=[t],s=e.append("tspan").attr("x",0).attr("y",u).attr("dy","".concat(1.1*++i+c,"em")).text(t))}))}},{key:"degToRad",value:function(t){return t*Math.PI/180}},{key:"radToDeg",value:function(t){return 180*t/Math.PI}}])&&a(n.prototype,e),i&&a(n,i),t}()},377:function(t,n,e){"use strict";var r=e(1),a=e.n(r),o=(e(378),Object(r.forwardRef)((function(t,n){var e=t.children,r=t.classNames,o=void 0===r?[]:r;return a.a.createElement("div",{ref:n,className:"chart-wrapper ".concat(o.join(" "))},e)})));n.a=o},378:function(t,n,e){},488:function(t,n,e){"use strict";e.r(n);var r=e(1),a=e.n(r),o=e(370),i=e(372),u=e(375),c=e(374);function s(t){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,n){return(f=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function p(t){var n=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var e,r=g(t);if(n){var a=g(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return d(this,e)}}function d(t,n){return!n||"object"!==s(n)&&"function"!==typeof n?h(t):n}function h(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function g(t){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function m(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var y=function(t){!function(t,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&f(t,n)}(o,t);var n,e,r,a=p(o);function o(t,n,e){var r;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,o),(r=a.call(this,t,e)).data=n,m(h(r),"outerRadius",void 0),m(h(r),"arc",void 0),m(h(r),"colors",[{color:"#02c4de",value:0},{color:"#02b3ca",value:1e5},{color:"#02a1b6",value:2e5},{color:"#028ea1",value:3e5},{color:"#038198",value:55e4},{color:"#04738f",value:7e5},{color:"#045676",value:8e5},{color:"#044862",value:9e4},{color:"#03394e",value:11e5},{color:"#033447",value:13e5}]);var i=Math.min(r.width,r.height)===r.width;return r.outerRadius=i?r.width/2:r.height/1.5,r.centerChart(r.width/2+r.margins.left,r.height/(i?2:1.5)+2*r.margins.top),r.update(),r}return n=o,(e=[{key:"yAxis",value:function(t,n){return t.attr("text-anchor","middle").call((function(t){return t.selectAll("g").data(n.ticks(5).slice(1)).join("g").attr("fill","none").call((function(t,e){return t.append("circle").attr("stroke","#bbb").attr("stroke-opacity",.5).attr("r",n)})).call((function(t){return t.append("text").attr("y",(function(t){return-n(t)})).attr("dy","0.35em").attr("stroke-width",5).text(n.tickFormat(5,"s")).attr("font-size",11).attr("font-family","'Open Sans', sans-serif").attr("font-weight",600).clone(!0).attr("fill","#000").attr("stroke","none")}))}))}},{key:"arcTween",value:function(t){var n=this,e=c.i({area:0},t);return function(t){var r=n.arc(e(t));return r||""}}},{key:"update",value:function(){var t=this,n=c.q().domain(this.colors.map((function(t){return t.value}))).range(this.colors.map((function(t){return t.color}))),e=c.n().range([1.4*Math.PI,2.6*Math.PI]).align(0).domain(this.data.map((function(t){return t.name}))),r=c.o().range([this.outerRadius*this.outerRadius,0]).domain([c.k(this.data,(function(t){return t.area})),c.j(this.data,(function(t){return t.area}))]),a=Object.assign((function(t){return Math.sqrt(r(t))}),r);this.svg.append("g").call(this.yAxis,a),this.arc=c.a().innerRadius(a(0)).outerRadius((function(t){return a(t.area)})).startAngle((function(t){return e(t.name)})).endAngle((function(t){return e(t.name)+e.bandwidth()})).padAngle(.01).padRadius(90),this.svg.append("g").selectAll("path").data(this.data).join("path").attr("fill",(function(t){return n(t.area)})).transition().duration(500).attrTween("d",(function(n){return t.arcTween(n)})),this.svg.append("g").selectAll("g").data(this.data).join("g").attr("text-anchor",(function(t){return(e(t.name)+e.bandwidth()/2+Math.PI)%(2*Math.PI)<Math.PI?"end":"start"})).attr("transform",(function(n){return"rotate("+(180*(e(n.name)+e.bandwidth()/2)/Math.PI-90)+")translate("+(t.outerRadius+5)+",0)"})).append("text").text((function(t){switch(t.name){case"Lao People's Democratic Republic":return"Lao People's D.R.";case"Macedonia (the former Yugoslav Republic of)":return"Macedonia";case"Micronesia (Federated States of)":return"Micronesia";case"Venezuela (Bolivarian Republic of)":return"Venezuela";default:return t.name}})).attr("transform",(function(t){return(e(t.name)+e.bandwidth()/2+Math.PI)%(2*Math.PI)<Math.PI?"rotate(180)":"rotate(0)"})).style("font-size","10px").attr("alignment-baseline","middle")}}])&&l(n.prototype,e),r&&l(n,r),o}(e(376).a),v=e(377),b=function(t){var n=t.data,e=Object(r.useRef)(null),o=Object(r.useRef)(null);return Object(r.useEffect)((function(){e.current&&(o.current=new y(e.current,n,{margins:{top:50,right:50,bottom:50,left:50}}))}),[n]),a.a.createElement(v.a,{ref:e})},w=e(102);n.default=function(){var t=Object(o.a)(u.b),n=t.data,e=t.loading;return a.a.createElement("section",null,a.a.createElement(i.a,null,"Countries with the Areas less than 1.5 million km",a.a.createElement("sup",null,"2")),e&&!n&&a.a.createElement(w.a,null),n&&a.a.createElement(b,{data:n.Country}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,