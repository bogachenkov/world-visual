(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{370:function(t,n,e){"use strict";e.d(n,"a",(function(){return h}));var r=e(371),i=e(0),o=e(1),u=e(73),a=e(36),s=e(4),c=function(){function t(t,n){this.isMounted=!1,this.previousOptions={},this.context={},this.options={},this.options=t||{},this.context=n||{}}return t.prototype.getOptions=function(){return this.options},t.prototype.setOptions=function(t,n){void 0===n&&(n=!1),n&&!Object(a.a)(this.options,t)&&(this.previousOptions=this.options),this.options=t},t.prototype.unmount=function(){this.isMounted=!1},t.prototype.refreshClient=function(){var t=this.options&&this.options.client||this.context&&this.context.client;Object(s.b)(!!t,2);var n=!1;return t!==this.client&&(n=!0,this.client=t,this.cleanup()),{client:this.client,isNew:n}},t.prototype.verifyDocumentType=function(t,n){var e=Object(r.e)(t);Object(r.d)(n),Object(r.d)(e.type);Object(s.b)(e.type===n,3)},t}(),l=function(t){function n(n){var e=n.options,r=n.context,i=n.onNewData,o=t.call(this,e,r)||this;return o.previousData={},o.currentObservable={},o.runLazy=!1,o.runLazyQuery=function(t){o.cleanup(),o.runLazy=!0,o.lazyOptions=t,o.onNewData()},o.getExecuteResult=function(){var t=o.getQueryResult();return o.startQuerySubscription(),t},o.obsRefetch=function(t){return o.currentObservable.query.refetch(t)},o.obsFetchMore=function(t){return o.currentObservable.query.fetchMore(t)},o.obsUpdateQuery=function(t){return o.currentObservable.query.updateQuery(t)},o.obsStartPolling=function(t){o.currentObservable&&o.currentObservable.query&&o.currentObservable.query.startPolling(t)},o.obsStopPolling=function(){o.currentObservable&&o.currentObservable.query&&o.currentObservable.query.stopPolling()},o.obsSubscribeToMore=function(t){return o.currentObservable.query.subscribeToMore(t)},o.onNewData=i,o}return Object(i.c)(n,t),n.prototype.execute=function(){this.refreshClient();var t=this.getOptions(),n=t.skip,e=t.query;return(n||e!==this.previousData.query)&&(this.removeQuerySubscription(),this.previousData.query=e),this.updateObservableQuery(),this.isMounted&&this.startQuerySubscription(),this.getExecuteSsrResult()||this.getExecuteResult()},n.prototype.executeLazy=function(){return this.runLazy?[this.runLazyQuery,this.execute()]:[this.runLazyQuery,{loading:!1,networkStatus:u.b.ready,called:!1,data:void 0}]},n.prototype.fetchData=function(){var t=this.getOptions();if(t.skip||!1===t.ssr)return!1;var n=this.currentObservable.query;return!!n.getCurrentResult().loading&&n.result()},n.prototype.afterExecute=function(t){var n=(void 0===t?{}:t).lazy,e=void 0!==n&&n;return this.isMounted=!0,e&&!this.runLazy||this.handleErrorOrCompleted(),this.previousOptions=this.getOptions(),this.unmount.bind(this)},n.prototype.cleanup=function(){this.removeQuerySubscription(),delete this.currentObservable.query,delete this.previousData.result},n.prototype.getOptions=function(){var n=t.prototype.getOptions.call(this);return this.lazyOptions&&(n.variables=Object(i.a)(Object(i.a)({},n.variables),this.lazyOptions.variables),n.context=Object(i.a)(Object(i.a)({},n.context),this.lazyOptions.context)),this.runLazy&&delete n.skip,n},n.prototype.ssrInitiated=function(){return this.context&&this.context.renderPromises},n.prototype.getExecuteSsrResult=function(){var t,n=!1===this.getOptions().ssr,e=this.refreshClient().client.disableNetworkFetches,r=Object(i.a)({loading:!0,networkStatus:u.b.loading,called:!0,data:void 0,stale:!1,client:this.client},this.observableQueryFields());return n&&(this.ssrInitiated()||e)?(this.previousData.result=r,r):(this.ssrInitiated()&&(t=this.context.renderPromises.addQueryPromise(this,this.getExecuteResult)||r),t)},n.prototype.prepareObservableQueryOptions=function(){var t=this.getOptions();this.verifyDocumentType(t.query,r.b.Query);var n=t.displayName||"Query";return!this.ssrInitiated()||"network-only"!==t.fetchPolicy&&"cache-and-network"!==t.fetchPolicy||(t.fetchPolicy="cache-first"),Object(i.a)(Object(i.a)({},t),{displayName:n,context:t.context,metadata:{reactComponent:{displayName:n}}})},n.prototype.initializeObservableQuery=function(){var t,n;if(this.ssrInitiated()&&(this.currentObservable.query=this.context.renderPromises.getSSRObservable(this.getOptions())),!this.currentObservable.query){var e=this.prepareObservableQueryOptions();this.previousData.observableQueryOptions=Object(i.a)(Object(i.a)({},e),{children:null}),this.currentObservable.query=this.refreshClient().client.watchQuery(Object(i.a)({},e)),this.ssrInitiated()&&(null===(n=null===(t=this.context)||void 0===t?void 0:t.renderPromises)||void 0===n||n.registerSSRObservable(this.currentObservable.query,e))}},n.prototype.updateObservableQuery=function(){if(this.currentObservable.query){var t=Object(i.a)(Object(i.a)({},this.prepareObservableQueryOptions()),{children:null});Object(a.a)(t,this.previousData.observableQueryOptions)||(this.previousData.observableQueryOptions=t,this.currentObservable.query.setOptions(t).catch((function(){})))}else this.initializeObservableQuery()},n.prototype.startQuerySubscription=function(){var t=this;if(!this.currentObservable.subscription&&!this.getOptions().skip){var n=this.currentObservable.query;this.currentObservable.subscription=n.subscribe({next:function(n){var e=n.loading,r=n.networkStatus,i=n.data,o=t.previousData.result;o&&o.loading===e&&o.networkStatus===r&&Object(a.a)(o.data,i)||t.onNewData()},error:function(n){if(t.resubscribeToQuery(),!n.hasOwnProperty("graphQLErrors"))throw n;var e=t.previousData.result;(e&&e.loading||!Object(a.a)(n,t.previousData.error))&&(t.previousData.error=n,t.onNewData())}})}},n.prototype.resubscribeToQuery=function(){this.removeQuerySubscription();var t=this.currentObservable.query.getLastError(),n=this.currentObservable.query.getLastResult();this.currentObservable.query.resetLastResults(),this.startQuerySubscription(),Object.assign(this.currentObservable.query,{lastError:t,lastResult:n})},n.prototype.getQueryResult=function(){var t=this.observableQueryFields(),n=this.getOptions();if(n.skip)t=Object(i.a)(Object(i.a)({},t),{data:void 0,error:void 0,loading:!1,called:!0});else{var e=this.currentObservable.query.getCurrentResult(),r=e.loading,o=e.partial,a=e.networkStatus,s=e.errors,c=e.error,l=e.data;if(s&&s.length>0&&(c=new u.a({graphQLErrors:s})),t=Object(i.a)(Object(i.a)({},t),{loading:r,networkStatus:a,error:c,called:!0}),r){var f=this.previousData.result&&this.previousData.result.data;t.data=f&&l?Object(i.a)(Object(i.a)({},f),l):f||l}else if(c)Object.assign(t,{data:(this.currentObservable.query.getLastResult()||{}).data});else{var h=this.currentObservable.query.options.fetchPolicy;if(n.partialRefetch&&!l&&o&&"cache-only"!==h)return Object.assign(t,{loading:!0,networkStatus:u.b.loading}),t.refetch(),t;t.data=l}}return t.client=this.client,this.previousData.loading=this.previousData.result&&this.previousData.result.loading||!1,this.previousData.result=t,this.currentObservable.query&&this.currentObservable.query.resetQueryStoreErrors(),t},n.prototype.handleErrorOrCompleted=function(){if(this.currentObservable.query&&this.previousData.result){var t=this.previousData.result,n=t.data,e=t.loading,r=t.error;if(!e){var i=this.getOptions(),o=i.query,u=i.variables,s=i.onCompleted,c=i.onError;if(this.previousOptions&&!this.previousData.loading&&Object(a.a)(this.previousOptions.query,o)&&Object(a.a)(this.previousOptions.variables,u))return;s&&!r?s(n):c&&r&&c(r)}}},n.prototype.removeQuerySubscription=function(){this.currentObservable.subscription&&(this.currentObservable.subscription.unsubscribe(),delete this.currentObservable.subscription)},n.prototype.observableQueryFields=function(){return{variables:this.currentObservable.query.variables,refetch:this.obsRefetch,fetchMore:this.obsFetchMore,updateQuery:this.obsUpdateQuery,startPolling:this.obsStartPolling,stopPolling:this.obsStopPolling,subscribeToMore:this.obsSubscribeToMore}},n}(c);function f(t,n,e){void 0===e&&(e=!1);var u=Object(o.useContext)(Object(r.c)()),s=Object(o.useReducer)((function(t){return t+1}),0),c=s[0],f=s[1],h=n?Object(i.a)(Object(i.a)({},n),{query:t}):{query:t},p=Object(o.useRef)(),v=p.current||new l({options:h,context:u,onNewData:function(){v.ssrInitiated()?f():Promise.resolve().then(f)}});v.setOptions(h),v.context=u,v.ssrInitiated()&&!p.current&&(p.current=v);var g=function(t,n){var e=Object(o.useRef)();return e.current&&Object(a.a)(n,e.current.key)||(e.current={key:n,value:t()}),e.current.value}((function(){return e?v.executeLazy():v.execute()}),{options:Object(i.a)(Object(i.a)({},h),{onError:void 0,onCompleted:void 0}),context:u,tick:c}),d=e?g[1]:g;return Object(o.useEffect)((function(){return p.current||(p.current=v),function(){return v.cleanup()}}),[]),Object(o.useEffect)((function(){return v.afterExecute({lazy:e})}),[d.loading,d.networkStatus,d.error,d.data]),g}function h(t,n){return f(t,n,!1)}!function(t){function n(n){var e=n.options,i=n.context,o=n.result,u=n.setResult,a=t.call(this,e,i)||this;return a.runMutation=function(t){void 0===t&&(t={}),a.onMutationStart();var n=a.generateNewMutationId();return a.mutate(t).then((function(t){return a.onMutationCompleted(t,n),t})).catch((function(t){if(a.onMutationError(t,n),!a.getOptions().onError)throw t}))},a.verifyDocumentType(e.mutation,r.b.Mutation),a.result=o,a.setResult=u,a.mostRecentMutationId=0,a}Object(i.c)(n,t),n.prototype.execute=function(t){return this.isMounted=!0,this.verifyDocumentType(this.getOptions().mutation,r.b.Mutation),t.client=this.refreshClient().client,[this.runMutation,t]},n.prototype.afterExecute=function(){return this.isMounted=!0,this.unmount.bind(this)},n.prototype.cleanup=function(){},n.prototype.mutate=function(t){var n=this.getOptions(),e=n.mutation,r=n.variables,o=n.optimisticResponse,u=n.update,a=n.context,s=void 0===a?{}:a,c=n.awaitRefetchQueries,l=void 0!==c&&c,f=n.fetchPolicy,h=Object(i.a)({},t),p=Object.assign({},r,h.variables);return delete h.variables,this.refreshClient().client.mutate(Object(i.a)({mutation:e,optimisticResponse:o,refetchQueries:h.refetchQueries||this.getOptions().refetchQueries,awaitRefetchQueries:l,update:u,context:s,fetchPolicy:f,variables:p},h))},n.prototype.onMutationStart=function(){this.result.loading||this.getOptions().ignoreResults||this.updateResult({loading:!0,error:void 0,data:void 0,called:!0})},n.prototype.onMutationCompleted=function(t,n){var e=this.getOptions(),r=e.onCompleted,i=e.ignoreResults,o=t.data,a=t.errors,s=a&&a.length>0?new u.a({graphQLErrors:a}):void 0;this.isMostRecentMutation(n)&&!i&&this.updateResult({called:!0,loading:!1,data:o,error:s}),r&&r(o)},n.prototype.onMutationError=function(t,n){var e=this.getOptions().onError;this.isMostRecentMutation(n)&&this.updateResult({loading:!1,error:t,data:void 0,called:!0}),e&&e(t)},n.prototype.generateNewMutationId=function(){return++this.mostRecentMutationId},n.prototype.isMostRecentMutation=function(t){return this.mostRecentMutationId===t},n.prototype.updateResult=function(t){!this.isMounted||this.previousResult&&Object(a.a)(this.previousResult,t)||(this.setResult(t),this.previousResult=t)}}(c);!function(t){function n(n){var e=n.options,r=n.context,i=n.setResult,o=t.call(this,e,r)||this;return o.currentObservable={},o.setResult=i,o.initialize(e),o}Object(i.c)(n,t),n.prototype.execute=function(t){if(!0===this.getOptions().skip)return this.cleanup(),{loading:!1,error:void 0,data:void 0,variables:this.getOptions().variables};var n=t;this.refreshClient().isNew&&(n=this.getLoadingResult());var e=this.getOptions().shouldResubscribe;return"function"===typeof e&&(e=!!e(this.getOptions())),!1!==e&&this.previousOptions&&Object.keys(this.previousOptions).length>0&&(this.previousOptions.subscription!==this.getOptions().subscription||!Object(a.a)(this.previousOptions.variables,this.getOptions().variables)||this.previousOptions.skip!==this.getOptions().skip)&&(this.cleanup(),n=this.getLoadingResult()),this.initialize(this.getOptions()),this.startSubscription(),this.previousOptions=this.getOptions(),Object(i.a)(Object(i.a)({},n),{variables:this.getOptions().variables})},n.prototype.afterExecute=function(){this.isMounted=!0},n.prototype.cleanup=function(){this.endSubscription(),delete this.currentObservable.query},n.prototype.initialize=function(t){this.currentObservable.query||!0===this.getOptions().skip||(this.currentObservable.query=this.refreshClient().client.subscribe({query:t.subscription,variables:t.variables,fetchPolicy:t.fetchPolicy}))},n.prototype.startSubscription=function(){this.currentObservable.subscription||(this.currentObservable.subscription=this.currentObservable.query.subscribe({next:this.updateCurrentData.bind(this),error:this.updateError.bind(this),complete:this.completeSubscription.bind(this)}))},n.prototype.getLoadingResult=function(){return{loading:!0,error:void 0,data:void 0}},n.prototype.updateResult=function(t){this.isMounted&&this.setResult(t)},n.prototype.updateCurrentData=function(t){var n=this.getOptions().onSubscriptionData;this.updateResult({data:t.data,loading:!1,error:void 0}),n&&n({client:this.refreshClient().client,subscriptionData:t})},n.prototype.updateError=function(t){this.updateResult({error:t,loading:!1})},n.prototype.completeSubscription=function(){var t=this.getOptions().onSubscriptionComplete;t&&t(),this.endSubscription()},n.prototype.endSubscription=function(){this.currentObservable.subscription&&(this.currentObservable.subscription.unsubscribe(),delete this.currentObservable.subscription)}}(c);!function(){function t(){this.queryPromises=new Map,this.queryInfoTrie=new Map}t.prototype.registerSSRObservable=function(t,n){this.lookupQueryInfo(n).observable=t},t.prototype.getSSRObservable=function(t){return this.lookupQueryInfo(t).observable},t.prototype.addQueryPromise=function(t,n){return this.lookupQueryInfo(t.getOptions()).seen?n():(this.queryPromises.set(t.getOptions(),new Promise((function(n){n(t.fetchData())}))),null)},t.prototype.hasPromises=function(){return this.queryPromises.size>0},t.prototype.consumeAndAwaitPromises=function(){var t=this,n=[];return this.queryPromises.forEach((function(e,r){t.lookupQueryInfo(r).seen=!0,n.push(e)})),this.queryPromises.clear(),Promise.all(n)},t.prototype.lookupQueryInfo=function(t){var n=this.queryInfoTrie,e=t.query,r=t.variables,i=n.get(e)||new Map;n.has(e)||n.set(e,i);var o=JSON.stringify(r),u=i.get(o)||{seen:!1,observable:null};return i.has(o)||i.set(o,u),u}}()},374:function(t,n,e){"use strict";e.d(n,"e",(function(){return s})),e.d(n,"j",(function(){return b})),e.d(n,"k",(function(){return w})),e.d(n,"b",(function(){return A})),e.d(n,"c",(function(){return T})),e.d(n,"d",(function(){return hr})),e.d(n,"m",(function(){return Sr})),e.d(n,"f",(function(){return ji})),e.d(n,"h",(function(){return Xo})),e.d(n,"g",(function(){return Tu})),e.d(n,"i",(function(){return In})),e.d(n,"n",(function(){return zu})),e.d(n,"o",(function(){return ga})),e.d(n,"p",(function(){return Qu})),e.d(n,"q",(function(){return da})),e.d(n,"r",(function(){return Bt})),e.d(n,"a",(function(){return Dc})),e.d(n,"l",(function(){return Pc}));var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r),u=o.right,a=(o.left,u);var s=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},c=function(t){return null===t?NaN:+t},l=Array.prototype,f=(l.slice,l.map,function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}),h=Math.sqrt(50),p=Math.sqrt(10),v=Math.sqrt(2),g=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=d(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function d(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=h?10:o>=p?5:o>=v?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=h?10:o>=p?5:o>=v?2:1)}function y(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=h?i*=10:o>=p?i*=5:o>=v&&(i*=2),n<t?-i:i}var m=function(t,n,e){if(null==e&&(e=c),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}},b=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},_=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e},w=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r};var x=Array.prototype.slice,M=function(t){return t};function O(t){return"translate("+(t+.5)+",0)"}function N(t){return"translate(0,"+(t+.5)+")"}function S(t){return function(n){return+t(n)}}function C(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function k(){return!this.__axis}function E(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,s=1===t||4===t?-1:1,c=4===t||2===t?"x":"y",l=1===t||3===t?O:N;function f(f){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):M:i,v=Math.max(o,0)+a,g=n.range(),d=+g[0]+.5,y=+g[g.length-1]+.5,m=(n.bandwidth?C:S)(n.copy()),b=f.selection?f.selection():f,_=b.selectAll(".domain").data([null]),w=b.selectAll(".tick").data(h,n).order(),x=w.exit(),O=w.enter().append("g").attr("class","tick"),N=w.select("line"),E=w.select("text");_=_.merge(_.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(O),N=N.merge(O.append("line").attr("stroke","currentColor").attr(c+"2",s*o)),E=E.merge(O.append("text").attr("fill","currentColor").attr(c,s*v).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),f!==b&&(_=_.transition(f),w=w.transition(f),N=N.transition(f),E=E.transition(f),x=x.transition(f).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=m(t))?l(t):this.getAttribute("transform")})),O.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return l(n&&isFinite(n=n(t))?n:m(t))}))),x.remove(),_.attr("d",4===t||2==t?u?"M"+s*u+","+d+"H0.5V"+y+"H"+s*u:"M0.5,"+d+"V"+y:u?"M"+d+","+s*u+"V0.5H"+y+"V"+s*u:"M"+d+",0.5H"+y),w.attr("opacity",1).attr("transform",(function(t){return l(m(t))})),N.attr(c+"2",s*o),E.attr(c,s*v).text(p),b.filter(k).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),b.each((function(){this.__axis=m}))}return f.scale=function(t){return arguments.length?(n=t,f):n},f.ticks=function(){return e=x.call(arguments),f},f.tickArguments=function(t){return arguments.length?(e=null==t?[]:x.call(t),f):e.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:x.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=u=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(u=+t,f):u},f.tickPadding=function(t){return arguments.length?(a=+t,f):a},f}function A(t){return E(3,t)}function T(t){return E(4,t)}var R={value:function(){}};function D(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new L(r)}function L(t){this._=t}function U(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function P(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function q(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=R,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}L.prototype=D.prototype={constructor:L,on:function(t,n){var e,r=this._,i=U(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!==typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=q(r[e],t.name,n);else if(null==n)for(e in r)r[e]=q(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=P(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new L(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var j=D;function F(){}var Q=function(t){return null==t?F:function(){return this.querySelector(t)}};function z(){return[]}var Y=function(t){return null==t?z:function(){return this.querySelectorAll(t)}},H=function(t){return function(){return this.matches(t)}},I=function(t){return new Array(t.length)};function X(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}X.prototype={constructor:X,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function $(t,n,e,r,i,o){for(var u,a=0,s=n.length,c=o.length;a<c;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new X(t,o[a]);for(;a<s;++a)(u=n[a])&&(i[a]=u)}function V(t,n,e,r,i,o,u){var a,s,c,l={},f=n.length,h=o.length,p=new Array(f);for(a=0;a<f;++a)(s=n[a])&&(p[a]=c="$"+u.call(s,s.__data__,a,n),c in l?i[a]=s:l[c]=s);for(a=0;a<h;++a)(s=l[c="$"+u.call(t,o[a],a,o)])?(r[a]=s,s.__data__=o[a],l[c]=null):e[a]=new X(t,o[a]);for(a=0;a<f;++a)(s=n[a])&&l[p[a]]===s&&(i[a]=s)}function Z(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var B="http://www.w3.org/1999/xhtml",W={svg:"http://www.w3.org/2000/svg",xhtml:B,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},J=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),W.hasOwnProperty(n)?{space:W[n],local:t}:t};function G(t){return function(){this.removeAttribute(t)}}function K(t){return function(){this.removeAttributeNS(t.space,t.local)}}function tt(t,n){return function(){this.setAttribute(t,n)}}function nt(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function et(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function rt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var it=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function ot(t){return function(){this.style.removeProperty(t)}}function ut(t,n,e){return function(){this.style.setProperty(t,n,e)}}function at(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function st(t,n){return t.style.getPropertyValue(n)||it(t).getComputedStyle(t,null).getPropertyValue(n)}function ct(t){return function(){delete this[t]}}function lt(t,n){return function(){this[t]=n}}function ft(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function ht(t){return t.trim().split(/^|\s+/)}function pt(t){return t.classList||new vt(t)}function vt(t){this._node=t,this._names=ht(t.getAttribute("class")||"")}function gt(t,n){for(var e=pt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function dt(t,n){for(var e=pt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function yt(t){return function(){gt(this,t)}}function mt(t){return function(){dt(this,t)}}function bt(t,n){return function(){(n.apply(this,arguments)?gt:dt)(this,t)}}vt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function _t(){this.textContent=""}function wt(t){return function(){this.textContent=t}}function xt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Mt(){this.innerHTML=""}function Ot(t){return function(){this.innerHTML=t}}function Nt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function St(){this.nextSibling&&this.parentNode.appendChild(this)}function Ct(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function kt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===B&&n.documentElement.namespaceURI===B?n.createElement(t):n.createElementNS(e,t)}}function Et(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var At=function(t){var n=J(t);return(n.local?Et:kt)(n)};function Tt(){return null}function Rt(){var t=this.parentNode;t&&t.removeChild(this)}function Dt(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function Lt(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var Ut={},Pt=null;"undefined"!==typeof document&&("onmouseenter"in document.documentElement||(Ut={mouseenter:"mouseover",mouseleave:"mouseout"}));function qt(t,n,e){return t=jt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function jt(t,n,e){return function(r){var i=Pt;Pt=r;try{t.call(this,this.__data__,n,e)}finally{Pt=i}}}function Ft(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Qt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function zt(t,n,e){var r=Ut.hasOwnProperty(t.type)?qt:jt;return function(i,o,u){var a,s=this.__on,c=r(n,o,u);if(s)for(var l=0,f=s.length;l<f;++l)if((a=s[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=c,a.capture=e),void(a.value=n);this.addEventListener(t.type,c,e),a={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(a):this.__on=[a]}}function Yt(t,n,e){var r=it(t),i=r.CustomEvent;"function"===typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Ht(t,n){return function(){return Yt(this,t,n)}}function It(t,n){return function(){return Yt(this,t,n.apply(this,arguments))}}var Xt=[null];function $t(t,n){this._groups=t,this._parents=n}function Vt(){return new $t([[document.documentElement]],Xt)}$t.prototype=Vt.prototype={constructor:$t,select:function(t){"function"!==typeof t&&(t=Q(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],s=a.length,c=r[i]=new Array(s),l=0;l<s;++l)(o=a[l])&&(u=t.call(o,o.__data__,l,a))&&("__data__"in o&&(u.__data__=o.__data__),c[l]=u);return new $t(r,this._parents)},selectAll:function(t){"function"!==typeof t&&(t=Y(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],s=a.length,c=0;c<s;++c)(u=a[c])&&(r.push(t.call(u,u.__data__,c,a)),i.push(u));return new $t(r,i)},filter:function(t){"function"!==typeof t&&(t=H(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,s=r[i]=[],c=0;c<a;++c)(o=u[c])&&t.call(o,o.__data__,c,u)&&s.push(o);return new $t(r,this._parents)},data:function(t,n){if(!t)return v=new Array(this.size()),l=-1,this.each((function(t){v[++l]=t})),v;var e,r=n?V:$,i=this._parents,o=this._groups;"function"!==typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),s=new Array(u),c=new Array(u),l=0;l<u;++l){var f=i[l],h=o[l],p=h.length,v=t.call(f,f&&f.__data__,l,i),g=v.length,d=s[l]=new Array(g),y=a[l]=new Array(g);r(f,h,d,y,c[l]=new Array(p),v,n);for(var m,b,_=0,w=0;_<g;++_)if(m=d[_]){for(_>=w&&(w=_+1);!(b=y[w])&&++w<g;);m._next=b||null}}return(a=new $t(a,i))._enter=s,a._exit=c,a},enter:function(){return new $t(this._enter||this._groups.map(I),this._parents)},exit:function(){return new $t(this._exit||this._groups.map(I),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"===typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,c=n[a],l=e[a],f=c.length,h=u[a]=new Array(f),p=0;p<f;++p)(s=c[p]||l[p])&&(h[p]=s);for(;a<r;++a)u[a]=n[a];return new $t(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Z);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],s=a.length,c=i[o]=new Array(s),l=0;l<s;++l)(u=a[l])&&(c[l]=u);c.sort(n)}return new $t(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=J(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?K:G:"function"===typeof n?e.local?rt:et:e.local?nt:tt)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?ot:"function"===typeof n?at:ut)(t,n,null==e?"":e)):st(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?ct:"function"===typeof n?ft:lt)(t,n)):this.node()[t]},classed:function(t,n){var e=ht(t+"");if(arguments.length<2){for(var r=pt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"===typeof n?bt:n?yt:mt)(e,n))},text:function(t){return arguments.length?this.each(null==t?_t:("function"===typeof t?xt:wt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Mt:("function"===typeof t?Nt:Ot)(t)):this.node().innerHTML},raise:function(){return this.each(St)},lower:function(){return this.each(Ct)},append:function(t){var n="function"===typeof t?t:At(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"===typeof t?t:At(t),r=null==n?Tt:"function"===typeof n?n:Q(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Rt)},clone:function(t){return this.select(t?Lt:Dt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Ft(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?zt:Qt,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var s,c=0,l=a.length;c<l;++c)for(r=0,s=a[c];r<u;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"===typeof n?It:Ht)(t,n))}};var Zt=Vt,Bt=function(t){return"string"===typeof t?new $t([[document.querySelector(t)]],[document.documentElement]):new $t([[t]],Xt)};var Wt=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Jt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Gt(){}var Kt="\\s*([+-]?\\d+)\\s*",tn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",nn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",en=/^#([0-9a-f]{3,8})$/,rn=new RegExp("^rgb\\("+[Kt,Kt,Kt]+"\\)$"),on=new RegExp("^rgb\\("+[nn,nn,nn]+"\\)$"),un=new RegExp("^rgba\\("+[Kt,Kt,Kt,tn]+"\\)$"),an=new RegExp("^rgba\\("+[nn,nn,nn,tn]+"\\)$"),sn=new RegExp("^hsl\\("+[tn,nn,nn]+"\\)$"),cn=new RegExp("^hsla\\("+[tn,nn,nn,tn]+"\\)$"),ln={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function fn(){return this.rgb().formatHex()}function hn(){return this.rgb().formatRgb()}function pn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=en.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?vn(n):3===e?new mn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?gn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?gn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=rn.exec(t))?new mn(n[1],n[2],n[3],1):(n=on.exec(t))?new mn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=un.exec(t))?gn(n[1],n[2],n[3],n[4]):(n=an.exec(t))?gn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=sn.exec(t))?xn(n[1],n[2]/100,n[3]/100,1):(n=cn.exec(t))?xn(n[1],n[2]/100,n[3]/100,n[4]):ln.hasOwnProperty(t)?vn(ln[t]):"transparent"===t?new mn(NaN,NaN,NaN,0):null}function vn(t){return new mn(t>>16&255,t>>8&255,255&t,1)}function gn(t,n,e,r){return r<=0&&(t=n=e=NaN),new mn(t,n,e,r)}function dn(t){return t instanceof Gt||(t=pn(t)),t?new mn((t=t.rgb()).r,t.g,t.b,t.opacity):new mn}function yn(t,n,e,r){return 1===arguments.length?dn(t):new mn(t,n,e,null==r?1:r)}function mn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function bn(){return"#"+wn(this.r)+wn(this.g)+wn(this.b)}function _n(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function wn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function xn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new On(t,n,e,r)}function Mn(t){if(t instanceof On)return new On(t.h,t.s,t.l,t.opacity);if(t instanceof Gt||(t=pn(t)),!t)return new On;if(t instanceof On)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,s=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=s<.5?o+i:2-o-i,u*=60):a=s>0&&s<1?0:u,new On(u,a,s,t.opacity)}function On(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Nn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function Sn(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}Wt(Gt,pn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:fn,formatHex:fn,formatHsl:function(){return Mn(this).formatHsl()},formatRgb:hn,toString:hn}),Wt(mn,yn,Jt(Gt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new mn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new mn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:bn,formatHex:bn,formatRgb:_n,toString:_n})),Wt(On,(function(t,n,e,r){return 1===arguments.length?Mn(t):new On(t,n,e,null==r?1:r)}),Jt(Gt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new On(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new On(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new mn(Nn(t>=240?t-240:t+120,i,r),Nn(t,i,r),Nn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Cn=function(t){return function(){return t}};function kn(t,n){return function(e){return t+e*n}}function En(t){return 1===(t=+t)?An:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Cn(isNaN(n)?e:n)}}function An(t,n){var e=n-t;return e?kn(t,e):Cn(isNaN(t)?n:t)}var Tn=function t(n){var e=En(n);function r(t,n){var r=e((t=yn(t)).r,(n=yn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=An(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function Rn(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=yn(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}Rn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return Sn((e-r/n)*n,u,i,o,a)}})),Rn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return Sn((e-r/n)*n,i,o,u,a)}}));var Dn=function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}};function Ln(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Un(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=In(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}var Pn=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},qn=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},jn=function(t,n){var e,r={},i={};for(e in null!==t&&"object"===typeof t||(t={}),null!==n&&"object"===typeof n||(n={}),n)e in t?r[e]=In(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Fn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Qn=new RegExp(Fn.source,"g");var zn,Yn,Hn=function(t,n){var e,r,i,o=Fn.lastIndex=Qn.lastIndex=0,u=-1,a=[],s=[];for(t+="",n+="";(e=Fn.exec(t))&&(r=Qn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,s.push({i:u,x:qn(e,r)})),o=Qn.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)a[(e=s[r]).i]=e.x(t);return a.join("")})},In=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?Cn(n):("number"===r?qn:"string"===r?(e=pn(n))?(n=e,Tn):Hn:n instanceof pn?Tn:n instanceof Date?Pn:Ln(n)?Dn:Array.isArray(n)?Un:"function"!==typeof n.valueOf&&"function"!==typeof n.toString||isNaN(n)?jn:qn)(t,n)},Xn=0,$n=0,Vn=0,Zn=0,Bn=0,Wn=0,Jn="object"===typeof performance&&performance.now?performance:Date,Gn="object"===typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Kn(){return Bn||(Gn(te),Bn=Jn.now()+Wn)}function te(){Bn=0}function ne(){this._call=this._time=this._next=null}function ee(t,n,e){var r=new ne;return r.restart(t,n,e),r}function re(){Bn=(Zn=Jn.now())+Wn,Xn=$n=0;try{!function(){Kn(),++Xn;for(var t,n=zn;n;)(t=Bn-n._time)>=0&&n._call.call(null,t),n=n._next;--Xn}()}finally{Xn=0,function(){var t,n,e=zn,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:zn=n);Yn=t,oe(r)}(),Bn=0}}function ie(){var t=Jn.now(),n=t-Zn;n>1e3&&(Wn-=n,Zn=t)}function oe(t){Xn||($n&&($n=clearTimeout($n)),t-Bn>24?(t<1/0&&($n=setTimeout(re,t-Jn.now()-Wn)),Vn&&(Vn=clearInterval(Vn))):(Vn||(Zn=Jn.now(),Vn=setInterval(ie,1e3)),Xn=1,Gn(re)))}ne.prototype=ee.prototype={constructor:ne,restart:function(t,n,e){if("function"!==typeof t)throw new TypeError("callback is not a function");e=(null==e?Kn():+e)+(null==n?0:+n),this._next||Yn===this||(Yn?Yn._next=this:zn=this,Yn=this),this._call=t,this._time=e,oe()},stop:function(){this._call&&(this._call=null,this._time=1/0,oe())}};var ue=function(t,n,e){var r=new ne;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},ae=j("start","end","cancel","interrupt"),se=[],ce=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var c,l,f,h;if(1!==e.state)return a();for(c in i)if((h=i[c]).name===e.name){if(3===h.state)return ue(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[c])}if(ue((function(){3===e.state&&(e.state=4,e.timer.restart(u,e.delay,e.time),u(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),c=0,l=-1;c<f;++c)(h=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=ee((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:ae,tween:se,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function le(t,n){var e=he(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function fe(t,n){var e=he(t,n);if(e.state>3)throw new Error("too late; already running");return e}function he(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var pe,ve,ge,de,ye=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}},me=180/Math.PI,be={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},_e=function(t,n,e,r,i,o){var u,a,s;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,s/=a),t*r<n*e&&(t=-t,n=-n,s=-s,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*me,skewX:Math.atan(s)*me,scaleX:u,scaleY:a}};function we(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],s=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var s=u.push("translate(",null,n,null,e);a.push({i:s-4,x:qn(t,i)},{i:s-2,x:qn(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:qn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:qn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,s),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:qn(t,e)},{i:a-2,x:qn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,s),o=u=null,function(t){for(var n,e=-1,r=s.length;++e<r;)a[(n=s[e]).i]=n.x(t);return a.join("")}}}var xe=we((function(t){return"none"===t?be:(pe||(pe=document.createElement("DIV"),ve=document.documentElement,ge=document.defaultView),pe.style.transform=t,t=ge.getComputedStyle(ve.appendChild(pe),null).getPropertyValue("transform"),ve.removeChild(pe),t=t.slice(7,-1).split(","),_e(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Me=we((function(t){return null==t?be:(de||(de=document.createElementNS("http://www.w3.org/2000/svg","g")),de.setAttribute("transform",t),(t=de.transform.baseVal.consolidate())?(t=t.matrix,_e(t.a,t.b,t.c,t.d,t.e,t.f)):be)}),", ",")",")");function Oe(t,n){var e,r;return function(){var i=fe(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function Ne(t,n,e){var r,i;if("function"!==typeof e)throw new Error;return function(){var o=fe(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},s=0,c=i.length;s<c;++s)if(i[s].name===n){i[s]=a;break}s===c&&i.push(a)}o.tween=i}}function Se(t,n,e){var r=t._id;return t.each((function(){var t=fe(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return he(t,r).value[n]}}var Ce=function(t,n){var e;return("number"===typeof n?qn:n instanceof pn?Tn:(e=pn(n))?(n=e,Tn):Hn)(t,n)};function ke(t){return function(){this.removeAttribute(t)}}function Ee(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ae(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}}function Te(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}function Re(t,n,e){var r,i,o;return function(){var u,a,s=e(this);if(null!=s)return(u=this.getAttribute(t))===(a=s+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,s));this.removeAttribute(t)}}function De(t,n,e){var r,i,o;return function(){var u,a,s=e(this);if(null!=s)return(u=this.getAttributeNS(t.space,t.local))===(a=s+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,s));this.removeAttributeNS(t.space,t.local)}}function Le(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Ue(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Pe(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Ue(t,i)),e}return i._value=n,i}function qe(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Le(t,i)),e}return i._value=n,i}function je(t,n){return function(){le(this,t).delay=+n.apply(this,arguments)}}function Fe(t,n){return n=+n,function(){le(this,t).delay=n}}function Qe(t,n){return function(){fe(this,t).duration=+n.apply(this,arguments)}}function ze(t,n){return n=+n,function(){fe(this,t).duration=n}}function Ye(t,n){if("function"!==typeof n)throw new Error;return function(){fe(this,t).ease=n}}function He(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?le:fe;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var Ie=Zt.prototype.constructor;function Xe(t){return function(){this.style.removeProperty(t)}}function $e(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Ve(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&$e(t,o,e)),r}return o._value=n,o}function Ze(t){return function(n){this.textContent=t.call(this,n)}}function Be(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Ze(r)),n}return r._value=t,r}var We=0;function Je(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ge(){return++We}var Ke=Zt.prototype;Je.prototype=function(t){return Zt().transition(t)}.prototype={constructor:Je,select:function(t){var n=this._name,e=this._id;"function"!==typeof t&&(t=Q(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,s,c=r[u],l=c.length,f=o[u]=new Array(l),h=0;h<l;++h)(a=c[h])&&(s=t.call(a,a.__data__,h,c))&&("__data__"in a&&(s.__data__=a.__data__),f[h]=s,ce(f[h],n,e,h,f,he(a,e)));return new Je(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!==typeof t&&(t=Y(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var s,c=r[a],l=c.length,f=0;f<l;++f)if(s=c[f]){for(var h,p=t.call(s,s.__data__,f,c),v=he(s,e),g=0,d=p.length;g<d;++g)(h=p[g])&&ce(h,n,e,g,p,v);o.push(p),u.push(s)}return new Je(o,u,n,e)},filter:function(t){"function"!==typeof t&&(t=H(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,s=r[i]=[],c=0;c<a;++c)(o=u[c])&&t.call(o,o.__data__,c,u)&&s.push(o);return new Je(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,c=n[a],l=e[a],f=c.length,h=u[a]=new Array(f),p=0;p<f;++p)(s=c[p]||l[p])&&(h[p]=s);for(;a<r;++a)u[a]=n[a];return new Je(u,this._parents,this._name,this._id)},selection:function(){return new Ie(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Ge(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,c=0;c<s;++c)if(u=a[c]){var l=he(u,n);ce(u,t,e,c,a,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Je(r,this._parents,t,e)},call:Ke.call,nodes:Ke.nodes,node:Ke.node,size:Ke.size,empty:Ke.empty,each:Ke.each,on:function(t,n){var e=this._id;return arguments.length<2?he(this.node(),e).on.on(t):this.each(He(e,t,n))},attr:function(t,n){var e=J(t),r="transform"===e?Me:Ce;return this.attrTween(t,"function"===typeof n?(e.local?De:Re)(e,r,Se(this,"attr."+t,n)):null==n?(e.local?Ee:ke)(e):(e.local?Te:Ae)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!==typeof n)throw new Error;var r=J(t);return this.tween(e,(r.local?Pe:qe)(r,n))},style:function(t,n,e){var r="transform"===(t+="")?xe:Ce;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=st(this,t),u=(this.style.removeProperty(t),st(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,Xe(t)):"function"===typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=st(this,t),a=e(this),s=a+"";return null==a&&(this.style.removeProperty(t),s=a=st(this,t)),u===s?null:u===r&&s===i?o:(i=s,o=n(r=u,a))}}(t,r,Se(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var s=fe(this,t),c=s.on,l=null==s.value[u]?o||(o=Xe(n)):void 0;c===e&&i===l||(r=(e=c).copy()).on(a,i=l),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=st(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!==typeof n)throw new Error;return this.tween(r,Ve(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"===typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Se(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!==typeof t)throw new Error;return this.tween(n,Be(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=he(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?Oe:Ne)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"===typeof t?je:Fe)(n,t)):he(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"===typeof t?Qe:ze)(n,t)):he(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Ye(n,t)):he(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,u){var a={value:u},s={value:function(){0===--i&&o()}};e.each((function(){var e=fe(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(s)),e.on=n}))}))}};var tr={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function nr(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return tr.time=Kn(),tr;return e}Zt.prototype.interrupt=function(t){return this.each((function(){ye(this,t)}))},Zt.prototype.transition=function(t){var n,e;t instanceof Je?(n=t._id,t=t._name):(n=Ge(),(e=tr).time=Kn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,c=0;c<s;++c)(u=a[c])&&ce(u,t,n,c,a,e||nr(u,n));return new Je(r,this._parents,t,n)};function er(t){return[+t[0],+t[1]]}function rr(t){return[er(t[0]),er(t[1])]}["w","e"].map(ir),["n","s"].map(ir),["n","w","e","s","nw","ne","sw","se"].map(ir);function ir(t){return{type:t}}var or=Math.cos,ur=Math.sin,ar=Math.PI,sr=ar/2,cr=2*ar,lr=Math.max;function fr(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}var hr=function(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,s,c,l,h=i.length,p=[],v=f(h),g=[],d=[],y=d.groups=new Array(h),m=new Array(h*h);for(o=0,c=-1;++c<h;){for(u=0,l=-1;++l<h;)u+=i[c][l];p.push(u),g.push(f(h)),o+=u}for(n&&v.sort((function(t,e){return n(p[t],p[e])})),e&&g.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),s=(o=lr(0,cr-t*h)/o)?t:cr/h,u=0,c=-1;++c<h;){for(a=u,l=-1;++l<h;){var b=v[c],_=g[b][l],w=i[b][_],x=u,M=u+=w*o;m[_*h+b]={index:b,subindex:_,startAngle:x,endAngle:M,value:w}}y[b]={index:b,startAngle:a,endAngle:u,value:p[b]},u+=s}for(c=-1;++c<h;)for(l=c-1;++l<h;){var O=m[l*h+c],N=m[c*h+l];(O.value||N.value)&&d.push(O.value<N.value?{source:N,target:O}:{source:O,target:N})}return r?d.sort(r):d}return i.padAngle=function(n){return arguments.length?(t=lr(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=fr(t))._=t,i):r&&r._},i},pr=Array.prototype.slice,vr=function(t){return function(){return t}},gr=Math.PI,dr=2*gr,yr=dr-1e-6;function mr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function br(){return new mr}mr.prototype=br.prototype={constructor:mr,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,s=r-n,c=o-t,l=u-n,f=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>1e-6)if(Math.abs(l*a-s*c)>1e-6&&i){var h=e-o,p=r-u,v=a*a+s*s,g=h*h+p*p,d=Math.sqrt(v),y=Math.sqrt(f),m=i*Math.tan((gr-Math.acos((v+f-g)/(2*d*y)))/2),b=m/y,_=m/d;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*c)+","+(n+b*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>c*p)+","+(this._x1=t+_*a)+","+(this._y1=n+_*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),s=t+u,c=n+a,l=1^o,f=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),e&&(f<0&&(f=f%dr+dr),f>yr?this._+="A"+e+","+e+",0,1,"+l+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+l+","+(this._x1=s)+","+(this._y1=c):f>1e-6&&(this._+="A"+e+","+e+",0,"+ +(f>=gr)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var _r=br;function wr(t){return t.source}function xr(t){return t.target}function Mr(t){return t.radius}function Or(t){return t.startAngle}function Nr(t){return t.endAngle}var Sr=function(){var t=wr,n=xr,e=Mr,r=Or,i=Nr,o=null;function u(){var u,a=pr.call(arguments),s=t.apply(this,a),c=n.apply(this,a),l=+e.apply(this,(a[0]=s,a)),f=r.apply(this,a)-sr,h=i.apply(this,a)-sr,p=l*or(f),v=l*ur(f),g=+e.apply(this,(a[0]=c,a)),d=r.apply(this,a)-sr,y=i.apply(this,a)-sr;if(o||(o=u=_r()),o.moveTo(p,v),o.arc(0,0,l,f,h),f===d&&h===y||(o.quadraticCurveTo(0,0,g*or(d),g*ur(d)),o.arc(0,0,g,d,y)),o.quadraticCurveTo(0,0,p,v),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"===typeof t?t:vr(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"===typeof t?t:vr(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"===typeof t?t:vr(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u};function Cr(){}function kr(t,n){var e=new Cr;if(t instanceof Cr)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}Cr.prototype=kr.prototype={constructor:Cr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Er=kr;function Ar(){}var Tr=Er.prototype;function Rr(t,n){var e=new Ar;if(t instanceof Ar)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Ar.prototype=Rr.prototype={constructor:Ar,has:Tr.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Tr.remove,clear:Tr.clear,values:Tr.keys,size:Tr.size,empty:Tr.empty,each:Tr.each};Array.prototype.slice;function Dr(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,s,c,l,f,h,p=t._root,v={data:r},g=t._x0,d=t._y0,y=t._x1,m=t._y1;if(!p)return t._root=v,t;for(;p.length;)if((c=n>=(o=(g+y)/2))?g=o:y=o,(l=e>=(u=(d+m)/2))?d=u:m=u,i=p,!(p=p[f=l<<1|c]))return i[f]=v,t;if(a=+t._x.call(null,p.data),s=+t._y.call(null,p.data),n===a&&e===s)return v.next=p,i?i[f]=v:t._root=v,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(c=n>=(o=(g+y)/2))?g=o:y=o,(l=e>=(u=(d+m)/2))?d=u:m=u}while((f=l<<1|c)===(h=(s>=u)<<1|a>=o));return i[h]=p,i[f]=v,t}var Lr=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function Ur(t){return t[0]}function Pr(t){return t[1]}function qr(t,n,e){var r=new jr(null==n?Ur:n,null==e?Pr:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function jr(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Fr(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Qr=qr.prototype=jr.prototype;Qr.copy=function(){var t,n,e=new jr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Fr(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Fr(n));return e},Qr.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Dr(this.cover(n,e),n,e,t)},Qr.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),s=1/0,c=1/0,l=-1/0,f=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<s&&(s=r),r>l&&(l=r),i<c&&(c=i),i>f&&(f=i));if(s>l||c>f)return this;for(this.cover(s,c).cover(l,f),e=0;e<o;++e)Dr(this,u[e],a[e],t[e]);return this},Qr.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var u,a,s=i-e,c=this._root;e>t||t>=i||r>n||n>=o;)switch(a=(n<r)<<1|t<e,(u=new Array(4))[a]=c,c=u,s*=2,a){case 0:i=e+s,o=r+s;break;case 1:e=i-s,o=r+s;break;case 2:i=e+s,r=o-s;break;case 3:e=i-s,r=o-s}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Qr.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Qr.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Qr.find=function(t,n,e){var r,i,o,u,a,s,c,l=this._x0,f=this._y0,h=this._x1,p=this._y1,v=[],g=this._root;for(g&&v.push(new Lr(g,l,f,h,p)),null==e?e=1/0:(l=t-e,f=n-e,h=t+e,p=n+e,e*=e);s=v.pop();)if(!(!(g=s.node)||(i=s.x0)>h||(o=s.y0)>p||(u=s.x1)<l||(a=s.y1)<f))if(g.length){var d=(i+u)/2,y=(o+a)/2;v.push(new Lr(g[3],d,y,u,a),new Lr(g[2],i,y,d,a),new Lr(g[1],d,o,u,y),new Lr(g[0],i,o,d,y)),(c=(n>=y)<<1|t>=d)&&(s=v[v.length-1],v[v.length-1]=v[v.length-1-c],v[v.length-1-c]=s)}else{var m=t-+this._x.call(null,g.data),b=n-+this._y.call(null,g.data),_=m*m+b*b;if(_<e){var w=Math.sqrt(e=_);l=t-w,f=n-w,h=t+w,p=n+w,r=g.data}}return r},Qr.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,s,c,l,f,h,p=this._root,v=this._x0,g=this._y0,d=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((c=o>=(a=(v+d)/2))?v=a:d=a,(l=u>=(s=(g+y)/2))?g=s:y=s,n=p,!(p=p[f=l<<1|c]))return this;if(!p.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},Qr.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Qr.root=function(){return this._root},Qr.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Qr.visit=function(t){var n,e,r,i,o,u,a=[],s=this._root;for(s&&a.push(new Lr(s,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&s.length){var c=(r+o)/2,l=(i+u)/2;(e=s[3])&&a.push(new Lr(e,c,l,o,u)),(e=s[2])&&a.push(new Lr(e,r,l,c,u)),(e=s[1])&&a.push(new Lr(e,c,i,o,l)),(e=s[0])&&a.push(new Lr(e,r,i,c,l))}return this},Qr.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Lr(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,s=n.x1,c=n.y1,l=(u+s)/2,f=(a+c)/2;(o=i[0])&&e.push(new Lr(o,u,a,l,f)),(o=i[1])&&e.push(new Lr(o,l,a,s,f)),(o=i[2])&&e.push(new Lr(o,u,f,l,c)),(o=i[3])&&e.push(new Lr(o,l,f,s,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Qr.x=function(t){return arguments.length?(this._x=t,this):this._x},Qr.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var zr=Math.PI,Yr=zr/2,Hr=zr/4,Ir=2*zr,Xr=180/zr,$r=zr/180,Vr=Math.abs,Zr=Math.atan,Br=Math.atan2,Wr=Math.cos,Jr=(Math.ceil,Math.exp),Gr=(Math.floor,Math.log),Kr=(Math.pow,Math.sin),ti=Math.sign||function(t){return t>0?1:t<0?-1:0},ni=Math.sqrt,ei=Math.tan;function ri(t){return t>1?Yr:t<-1?-Yr:Math.asin(t)}function ii(){}function oi(t,n){t&&ai.hasOwnProperty(t.type)&&ai[t.type](t,n)}var ui={Feature:function(t,n){oi(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)oi(e[r].geometry,n)}},ai={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){si(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)si(e[r],n,0)},Polygon:function(t,n){ci(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)ci(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)oi(e[r],n)}};function si(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function ci(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)si(t[e],n,1);n.polygonEnd()}var li,fi,hi,pi,vi,gi,di,yi,mi,bi,_i,wi,xi,Mi,Oi,Ni,Si=function(t,n){t&&ui.hasOwnProperty(t.type)?ui[t.type](t,n):oi(t,n)},Ci={sphere:ii,point:ki,lineStart:Ai,lineEnd:Di,polygonStart:function(){Ci.lineStart=Li,Ci.lineEnd=Ui},polygonEnd:function(){Ci.lineStart=Ai,Ci.lineEnd=Di}};function ki(t,n){t*=$r;var e=Wr(n*=$r);Ei(e*Wr(t),e*Kr(t),Kr(n))}function Ei(t,n,e){++li,hi+=(t-hi)/li,pi+=(n-pi)/li,vi+=(e-vi)/li}function Ai(){Ci.point=Ti}function Ti(t,n){t*=$r;var e=Wr(n*=$r);Mi=e*Wr(t),Oi=e*Kr(t),Ni=Kr(n),Ci.point=Ri,Ei(Mi,Oi,Ni)}function Ri(t,n){t*=$r;var e=Wr(n*=$r),r=e*Wr(t),i=e*Kr(t),o=Kr(n),u=Br(ni((u=Oi*o-Ni*i)*u+(u=Ni*r-Mi*o)*u+(u=Mi*i-Oi*r)*u),Mi*r+Oi*i+Ni*o);fi+=u,gi+=u*(Mi+(Mi=r)),di+=u*(Oi+(Oi=i)),yi+=u*(Ni+(Ni=o)),Ei(Mi,Oi,Ni)}function Di(){Ci.point=ki}function Li(){Ci.point=Pi}function Ui(){qi(wi,xi),Ci.point=ki}function Pi(t,n){wi=t,xi=n,t*=$r,n*=$r,Ci.point=qi;var e=Wr(n);Mi=e*Wr(t),Oi=e*Kr(t),Ni=Kr(n),Ei(Mi,Oi,Ni)}function qi(t,n){t*=$r;var e=Wr(n*=$r),r=e*Wr(t),i=e*Kr(t),o=Kr(n),u=Oi*o-Ni*i,a=Ni*r-Mi*o,s=Mi*i-Oi*r,c=ni(u*u+a*a+s*s),l=ri(c),f=c&&-l/c;mi+=f*u,bi+=f*a,_i+=f*s,fi+=l,gi+=l*(Mi+(Mi=r)),di+=l*(Oi+(Oi=i)),yi+=l*(Ni+(Ni=o)),Ei(Mi,Oi,Ni)}var ji=function(t){li=fi=hi=pi=vi=gi=di=yi=mi=bi=_i=0,Si(t,Ci);var n=mi,e=bi,r=_i,i=n*n+e*e+r*r;return i<1e-12&&(n=gi,e=di,r=yi,fi<1e-6&&(n=hi,e=pi,r=vi),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[Br(e,n)*Xr,ri(r/ni(i))*Xr]},Fi=function(t){return t},Qi=function(){return new zi};function zi(){this.reset()}zi.prototype={constructor:zi,reset:function(){this.s=this.t=0},add:function(t){Hi(Yi,t,this.t),Hi(this,Yi.s,this.s),this.s?this.t+=Yi.t:this.s=Yi.t},valueOf:function(){return this.s}};var Yi=new zi;function Hi(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var Ii,Xi,$i,Vi,Zi=Qi(),Bi=Qi(),Wi={point:ii,lineStart:ii,lineEnd:ii,polygonStart:function(){Wi.lineStart=Ji,Wi.lineEnd=to},polygonEnd:function(){Wi.lineStart=Wi.lineEnd=Wi.point=ii,Zi.add(Vr(Bi)),Bi.reset()},result:function(){var t=Zi/2;return Zi.reset(),t}};function Ji(){Wi.point=Gi}function Gi(t,n){Wi.point=Ki,Ii=$i=t,Xi=Vi=n}function Ki(t,n){Bi.add(Vi*t-$i*n),$i=t,Vi=n}function to(){Ki(Ii,Xi)}var no=Wi,eo=1/0,ro=eo,io=-eo,oo=io;var uo,ao,so,co,lo={point:function(t,n){t<eo&&(eo=t);t>io&&(io=t);n<ro&&(ro=n);n>oo&&(oo=n)},lineStart:ii,lineEnd:ii,polygonStart:ii,polygonEnd:ii,result:function(){var t=[[eo,ro],[io,oo]];return io=oo=-(ro=eo=1/0),t}},fo=0,ho=0,po=0,vo=0,go=0,yo=0,mo=0,bo=0,_o=0,wo={point:xo,lineStart:Mo,lineEnd:So,polygonStart:function(){wo.lineStart=Co,wo.lineEnd=ko},polygonEnd:function(){wo.point=xo,wo.lineStart=Mo,wo.lineEnd=So},result:function(){var t=_o?[mo/_o,bo/_o]:yo?[vo/yo,go/yo]:po?[fo/po,ho/po]:[NaN,NaN];return fo=ho=po=vo=go=yo=mo=bo=_o=0,t}};function xo(t,n){fo+=t,ho+=n,++po}function Mo(){wo.point=Oo}function Oo(t,n){wo.point=No,xo(so=t,co=n)}function No(t,n){var e=t-so,r=n-co,i=ni(e*e+r*r);vo+=i*(so+t)/2,go+=i*(co+n)/2,yo+=i,xo(so=t,co=n)}function So(){wo.point=xo}function Co(){wo.point=Eo}function ko(){Ao(uo,ao)}function Eo(t,n){wo.point=Ao,xo(uo=so=t,ao=co=n)}function Ao(t,n){var e=t-so,r=n-co,i=ni(e*e+r*r);vo+=i*(so+t)/2,go+=i*(co+n)/2,yo+=i,mo+=(i=co*t-so*n)*(so+t),bo+=i*(co+n),_o+=3*i,xo(so=t,co=n)}var To=wo;function Ro(t){this._context=t}Ro.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Ir)}},result:ii};var Do,Lo,Uo,Po,qo,jo=Qi(),Fo={point:ii,lineStart:function(){Fo.point=Qo},lineEnd:function(){Do&&zo(Lo,Uo),Fo.point=ii},polygonStart:function(){Do=!0},polygonEnd:function(){Do=null},result:function(){var t=+jo;return jo.reset(),t}};function Qo(t,n){Fo.point=zo,Lo=Po=t,Uo=qo=n}function zo(t,n){Po-=t,qo-=n,jo.add(ni(Po*Po+qo*qo)),Po=t,qo=n}var Yo=Fo;function Ho(){this._string=[]}function Io(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Ho.prototype={_radius:4.5,_circle:Io(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Io(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var Xo=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"===typeof i&&r.pointRadius(+i.apply(this,arguments)),Si(t,e(r))),r.result()}return o.area=function(t){return Si(t,e(no)),no.result()},o.measure=function(t){return Si(t,e(Yo)),Yo.result()},o.bounds=function(t){return Si(t,e(lo)),lo.result()},o.centroid=function(t){return Si(t,e(To)),To.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,Fi):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new Ho):new Ro(n=t),"function"!==typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"===typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)},$o=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function Vo(t,n){return[Vr(t)>zr?t+Math.round(-t/Ir)*Ir:t,n]}function Zo(t,n,e){return(t%=Ir)?n||e?$o(Wo(t),Jo(n,e)):Wo(t):n||e?Jo(n,e):Vo}function Bo(t){return function(n,e){return[(n+=t)>zr?n-Ir:n<-zr?n+Ir:n,e]}}function Wo(t){var n=Bo(t);return n.invert=Bo(-t),n}function Jo(t,n){var e=Wr(t),r=Kr(t),i=Wr(n),o=Kr(n);function u(t,n){var u=Wr(n),a=Wr(t)*u,s=Kr(t)*u,c=Kr(n),l=c*e+a*r;return[Br(s*i-l*o,a*e-c*r),ri(l*i+s*o)]}return u.invert=function(t,n){var u=Wr(n),a=Wr(t)*u,s=Kr(t)*u,c=Kr(n),l=c*i-s*o;return[Br(s*i+c*o,a*e+l*r),ri(l*e-a*r)]},u}Vo.invert=Vo;var Go=function(){var t,n=[];return{point:function(n,e,r){t.push([n,e,r])},lineStart:function(){n.push(t=[])},lineEnd:ii,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},Ko=function(t,n){return Vr(t[0]-n[0])<1e-6&&Vr(t[1]-n[1])<1e-6};function tu(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var nu=function(t,n,e,r,i){var o,u,a=[],s=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(Ko(r,u)){if(!r[2]&&!u[2]){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}u[0]+=2e-6}a.push(e=new tu(r,t,null,!0)),s.push(e.o=new tu(r,null,e,!1)),a.push(e=new tu(u,t,null,!1)),s.push(e.o=new tu(u,null,e,!0))}})),a.length){for(s.sort(n),eu(a),eu(s),o=0,u=s.length;o<u;++o)s[o].e=e=!e;for(var c,l,f=a[0];;){for(var h=f,p=!0;h.v;)if((h=h.n)===f)return;c=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=c.length;o<u;++o)i.point((l=c[o])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(c=h.p.z,o=c.length-1;o>=0;--o)i.point((l=c[o])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}c=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}};function eu(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}function ru(t){return[Br(t[1],t[0]),ri(t[2])]}function iu(t){var n=t[0],e=t[1],r=Wr(e);return[r*Wr(n),r*Kr(n),Kr(e)]}function ou(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function uu(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function au(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function su(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function cu(t){var n=ni(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var lu=Qi();function fu(t){return Vr(t[0])<=zr?t[0]:ti(t[0])*((Vr(t[0])+zr)%Ir-zr)}var hu=function(t,n,e,r){return function(i){var o,u,a,s=n(i),c=Go(),l=n(c),f=!1,h={point:p,lineStart:g,lineEnd:d,polygonStart:function(){h.point=y,h.lineStart=m,h.lineEnd=b,u=[],o=[]},polygonEnd:function(){h.point=p,h.lineStart=g,h.lineEnd=d,u=_(u);var t=function(t,n){var e=fu(n),r=n[1],i=Kr(r),o=[Kr(e),-Wr(e),0],u=0,a=0;lu.reset(),1===i?r=Yr+1e-6:-1===i&&(r=-Yr-1e-6);for(var s=0,c=t.length;s<c;++s)if(f=(l=t[s]).length)for(var l,f,h=l[f-1],p=fu(h),v=h[1]/2+Hr,g=Kr(v),d=Wr(v),y=0;y<f;++y,p=b,g=w,d=x,h=m){var m=l[y],b=fu(m),_=m[1]/2+Hr,w=Kr(_),x=Wr(_),M=b-p,O=M>=0?1:-1,N=O*M,S=N>zr,C=g*w;if(lu.add(Br(C*O*Kr(N),d*x+C*Wr(N))),u+=S?M+O*Ir:M,S^p>=e^b>=e){var k=uu(iu(h),iu(m));cu(k);var E=uu(o,k);cu(E);var A=(S^M>=0?-1:1)*ri(E[2]);(r>A||r===A&&(k[0]||k[1]))&&(a+=S^M>=0?1:-1)}}return(u<-1e-6||u<1e-6&&lu<-1e-6)^1&a}(o,r);u.length?(f||(i.polygonStart(),f=!0),nu(u,vu,t,e,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,e){t(n,e)&&i.point(n,e)}function v(t,n){s.point(t,n)}function g(){h.point=v,s.lineStart()}function d(){h.point=p,s.lineEnd()}function y(t,n){a.push([t,n]),l.point(t,n)}function m(){l.lineStart(),a=[]}function b(){y(a[0][0],a[0][1]),l.lineEnd();var t,n,e,r,s=l.clean(),h=c.result(),p=h.length;if(a.pop(),o.push(a),a=null,p)if(1&s){if((n=(e=h[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else p>1&&2&s&&h.push(h.pop().concat(h.shift())),u.push(h.filter(pu))}return h}};function pu(t){return t.length>1}function vu(t,n){return((t=t.x)[0]<0?t[1]-Yr-1e-6:Yr-t[1])-((n=n.x)[0]<0?n[1]-Yr-1e-6:Yr-n[1])}var gu=hu((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?zr:-zr,s=Vr(o-e);Vr(s-zr)<1e-6?(t.point(e,r=(r+u)/2>0?Yr:-Yr),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&s>=zr&&(Vr(e-i)<1e-6&&(e-=1e-6*i),Vr(o-a)<1e-6&&(o-=1e-6*a),r=function(t,n,e,r){var i,o,u=Kr(t-e);return Vr(u)>1e-6?Zr((Kr(n)*(o=Wr(r))*Kr(e)-Kr(r)*(i=Wr(n))*Kr(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*Yr,r.point(-zr,i),r.point(0,i),r.point(zr,i),r.point(zr,0),r.point(zr,-i),r.point(0,-i),r.point(-zr,-i),r.point(-zr,0),r.point(-zr,i);else if(Vr(t[0]-n[0])>1e-6){var o=t[0]<n[0]?zr:-zr;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-zr,-Yr]);function du(t,n,e,r,i,o){if(e){var u=Wr(n),a=Kr(n),s=r*e;null==i?(i=n+r*Ir,o=n-s/2):(i=yu(u,i),o=yu(u,o),(r>0?i<o:i>o)&&(i+=r*Ir));for(var c,l=i;r>0?l>o:l<o;l-=s)c=ru([u,-a*Wr(l),-a*Kr(l)]),t.point(c[0],c[1])}}function yu(t,n){(n=iu(n))[0]-=t,cu(n);var e,r=(e=-n[1])>1?0:e<-1?zr:Math.acos(e);return((-n[2]<0?-r:r)+Ir-1e-6)%Ir}var mu=function(t){var n=Wr(t),e=6*$r,r=n>0,i=Vr(n)>1e-6;function o(t,e){return Wr(t)*Wr(e)>n}function u(t,e,r){var i=[1,0,0],o=uu(iu(t),iu(e)),u=ou(o,o),a=o[0],s=u-a*a;if(!s)return!r&&t;var c=n*u/s,l=-n*a/s,f=uu(i,o),h=su(i,c);au(h,su(o,l));var p=f,v=ou(h,p),g=ou(p,p),d=v*v-g*(ou(h,h)-1);if(!(d<0)){var y=ni(d),m=su(p,(-v-y)/g);if(au(m,h),m=ru(m),!r)return m;var b,_=t[0],w=e[0],x=t[1],M=e[1];w<_&&(b=_,_=w,w=b);var O=w-_,N=Vr(O-zr)<1e-6;if(!N&&M<x&&(b=x,x=M,M=b),N||O<1e-6?N?x+M>0^m[1]<(Vr(m[0]-_)<1e-6?x:M):x<=m[1]&&m[1]<=M:O>zr^(_<=m[0]&&m[0]<=w)){var S=su(p,(-v+y)/g);return au(S,h),[m,ru(S)]}}}function a(n,e){var i=r?t:zr-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return hu(o,(function(t){var n,e,s,c,l;return{lineStart:function(){c=s=!1,l=1},point:function(f,h){var p,v=[f,h],g=o(f,h),d=r?g?0:a(f,h):g?a(f+(f<0?zr:-zr),h):0;if(!n&&(c=s=g)&&t.lineStart(),g!==s&&(!(p=u(n,v))||Ko(n,p)||Ko(v,p))&&(v[2]=1),g!==s)l=0,g?(t.lineStart(),p=u(v,n),t.point(p[0],p[1])):(p=u(n,v),t.point(p[0],p[1],2),t.lineEnd()),n=p;else if(i&&n&&r^g){var y;d&e||!(y=u(v,n,!0))||(l=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1],3)))}!g||n&&Ko(n,v)||t.point(v[0],v[1]),n=v,s=g,e=d},lineEnd:function(){s&&t.lineEnd(),n=null},clean:function(){return l|(c&&s)<<1}}}),(function(n,r,i,o){du(o,t,e,i,n,r)}),r?[0,-t]:[-zr,t-zr])};function bu(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,c){var l=0,f=0;if(null==i||(l=u(i,a))!==(f=u(o,a))||s(i,o)<0^a>0)do{c.point(0===l||3===l?t:e,l>1?r:n)}while((l=(l+a+4)%4)!==f);else c.point(o[0],o[1])}function u(r,i){return Vr(r[0]-t)<1e-6?i>0?0:3:Vr(r[0]-e)<1e-6?i>0?2:1:Vr(r[1]-n)<1e-6?i>0?1:0:i>0?3:2}function a(t,n){return s(t.x,n.x)}function s(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var s,c,l,f,h,p,v,g,d,y,m,b=u,w=Go(),x={point:M,lineStart:function(){x.point=O,c&&c.push(l=[]);y=!0,d=!1,v=g=NaN},lineEnd:function(){s&&(O(f,h),p&&d&&w.rejoin(),s.push(w.result()));x.point=M,d&&b.lineEnd()},polygonStart:function(){b=w,s=[],c=[],m=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=c.length;e<i;++e)for(var o,u,a=c[e],s=1,l=a.length,f=a[0],h=f[0],p=f[1];s<l;++s)o=h,u=p,f=a[s],h=f[0],p=f[1],u<=r?p>r&&(h-o)*(r-u)>(p-u)*(t-o)&&++n:p<=r&&(h-o)*(r-u)<(p-u)*(t-o)&&--n;return n}(),e=m&&n,i=(s=_(s)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&nu(s,a,n,o,u),u.polygonEnd());b=u,s=c=l=null}};function M(t,n){i(t,n)&&b.point(t,n)}function O(o,u){var a=i(o,u);if(c&&l.push([o,u]),y)f=o,h=u,p=a,y=!1,a&&(b.lineStart(),b.point(o,u));else if(a&&d)b.point(o,u);else{var s=[v=Math.max(-1e9,Math.min(1e9,v)),g=Math.max(-1e9,Math.min(1e9,g))],_=[o=Math.max(-1e9,Math.min(1e9,o)),u=Math.max(-1e9,Math.min(1e9,u))];!function(t,n,e,r,i,o){var u,a=t[0],s=t[1],c=0,l=1,f=n[0]-a,h=n[1]-s;if(u=e-a,f||!(u>0)){if(u/=f,f<0){if(u<c)return;u<l&&(l=u)}else if(f>0){if(u>l)return;u>c&&(c=u)}if(u=i-a,f||!(u<0)){if(u/=f,f<0){if(u>l)return;u>c&&(c=u)}else if(f>0){if(u<c)return;u<l&&(l=u)}if(u=r-s,h||!(u>0)){if(u/=h,h<0){if(u<c)return;u<l&&(l=u)}else if(h>0){if(u>l)return;u>c&&(c=u)}if(u=o-s,h||!(u<0)){if(u/=h,h<0){if(u>l)return;u>c&&(c=u)}else if(h>0){if(u<c)return;u<l&&(l=u)}return c>0&&(t[0]=a+c*f,t[1]=s+c*h),l<1&&(n[0]=a+l*f,n[1]=s+l*h),!0}}}}}(s,_,t,n,e,r)?a&&(b.lineStart(),b.point(o,u),m=!1):(d||(b.lineStart(),b.point(s[0],s[1])),b.point(_[0],_[1]),a||b.lineEnd(),m=!1)}v=o,g=u,d=a}return x}}function _u(t){return function(n){var e=new wu;for(var r in t)e[r]=t[r];return e.stream=n,e}}function wu(){}function xu(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Si(e,t.stream(lo)),n(lo.result()),null!=r&&t.clipExtent(r),t}function Mu(t,n,e){return xu(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,a])}),e)}wu.prototype={constructor:wu,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Ou=Wr(30*$r),Nu=function(t,n){return+n?function(t,n){function e(r,i,o,u,a,s,c,l,f,h,p,v,g,d){var y=c-r,m=l-i,b=y*y+m*m;if(b>4*n&&g--){var _=u+h,w=a+p,x=s+v,M=ni(_*_+w*w+x*x),O=ri(x/=M),N=Vr(Vr(x)-1)<1e-6||Vr(o-f)<1e-6?(o+f)/2:Br(w,_),S=t(N,O),C=S[0],k=S[1],E=C-r,A=k-i,T=m*E-y*A;(T*T/b>n||Vr((y*E+m*A)/b-.5)>.3||u*h+a*p+s*v<Ou)&&(e(r,i,o,u,a,s,C,k,N,_/=M,w/=M,x,g,d),d.point(C,k),e(C,k,N,_,w,x,c,l,f,h,p,v,g,d))}}return function(n){var r,i,o,u,a,s,c,l,f,h,p,v,g={point:d,lineStart:y,lineEnd:b,polygonStart:function(){n.polygonStart(),g.lineStart=_},polygonEnd:function(){n.polygonEnd(),g.lineStart=y}};function d(e,r){e=t(e,r),n.point(e[0],e[1])}function y(){l=NaN,g.point=m,n.lineStart()}function m(r,i){var o=iu([r,i]),u=t(r,i);e(l,f,c,h,p,v,l=u[0],f=u[1],c=r,h=o[0],p=o[1],v=o[2],16,n),n.point(l,f)}function b(){g.point=d,n.lineEnd()}function _(){y(),g.point=w,g.lineEnd=x}function w(t,n){m(r=t,n),i=l,o=f,u=h,a=p,s=v,g.point=m}function x(){e(l,f,c,h,p,v,i,o,r,u,a,s,16,n),g.lineEnd=b,b()}return g}}(t,n):function(t){return _u({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var Su=_u({point:function(t,n){this.stream.point(t*$r,n*$r)}});function Cu(t,n,e,r,i){function o(o,u){return[n+t*(o*=r),e-t*(u*=i)]}return o.invert=function(o,u){return[(o-n)/t*r,(e-u)/t*i]},o}function ku(t,n,e,r,i,o){var u=Wr(o),a=Kr(o),s=u*t,c=a*t,l=u/t,f=a/t,h=(a*e-u*n)/t,p=(a*n+u*e)/t;function v(t,o){return[s*(t*=r)-c*(o*=i)+n,e-c*t-s*o]}return v.invert=function(t,n){return[r*(l*t-f*n+h),i*(p-f*t-l*n)]},v}function Eu(t){return function(t){var n,e,r,i,o,u,a,s,c,l,f=150,h=480,p=250,v=0,g=0,d=0,y=0,m=0,b=0,_=1,w=1,x=null,M=gu,O=null,N=Fi,S=.5;function C(t){return s(t[0]*$r,t[1]*$r)}function k(t){return(t=s.invert(t[0],t[1]))&&[t[0]*Xr,t[1]*Xr]}function E(){var t=ku(f,0,0,_,w,b).apply(null,n(v,g)),r=(b?ku:Cu)(f,h-t[0],p-t[1],_,w,b);return e=Zo(d,y,m),a=$o(n,r),s=$o(e,a),u=Nu(a,S),A()}function A(){return c=l=null,C}return C.stream=function(t){return c&&l===t?c:c=Su(function(t){return _u({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(M(u(N(l=t)))))},C.preclip=function(t){return arguments.length?(M=t,x=void 0,A()):M},C.postclip=function(t){return arguments.length?(N=t,O=r=i=o=null,A()):N},C.clipAngle=function(t){return arguments.length?(M=+t?mu(x=t*$r):(x=null,gu),A()):x*Xr},C.clipExtent=function(t){return arguments.length?(N=null==t?(O=r=i=o=null,Fi):bu(O=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),A()):null==O?null:[[O,r],[i,o]]},C.scale=function(t){return arguments.length?(f=+t,E()):f},C.translate=function(t){return arguments.length?(h=+t[0],p=+t[1],E()):[h,p]},C.center=function(t){return arguments.length?(v=t[0]%360*$r,g=t[1]%360*$r,E()):[v*Xr,g*Xr]},C.rotate=function(t){return arguments.length?(d=t[0]%360*$r,y=t[1]%360*$r,m=t.length>2?t[2]%360*$r:0,E()):[d*Xr,y*Xr,m*Xr]},C.angle=function(t){return arguments.length?(b=t%360*$r,E()):b*Xr},C.reflectX=function(t){return arguments.length?(_=t?-1:1,E()):_<0},C.reflectY=function(t){return arguments.length?(w=t?-1:1,E()):w<0},C.precision=function(t){return arguments.length?(u=Nu(a,S=t*t),A()):ni(S)},C.fitExtent=function(t,n){return Mu(C,t,n)},C.fitSize=function(t,n){return function(t,n,e){return Mu(t,[[0,0],n],e)}(C,t,n)},C.fitWidth=function(t,n){return function(t,n,e){return xu(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])}),e)}(C,t,n)},C.fitHeight=function(t,n){return function(t,n,e){return xu(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])}),e)}(C,t,n)},function(){return n=t.apply(this,arguments),C.invert=n.invert&&k,E()}}((function(){return t}))()}function Au(t,n){return[t,Gr(ei((Yr+n)/2))]}Au.invert=function(t,n){return[t,2*Zr(Jr(n))-Yr]};var Tu=function(){return function(t){var n,e,r,i=Eu(t),o=i.center,u=i.scale,a=i.translate,s=i.clipExtent,c=null;function l(){var o=zr*u(),a=i(function(t){function n(n){return(n=t(n[0]*$r,n[1]*$r))[0]*=Xr,n[1]*=Xr,n}return t=Zo(t[0]*$r,t[1]*$r,t.length>2?t[2]*$r:0),n.invert=function(n){return(n=t.invert(n[0]*$r,n[1]*$r))[0]*=Xr,n[1]*=Xr,n},n}(i.rotate()).invert([0,0]));return s(null==c?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===Au?[[Math.max(a[0]-o,c),n],[Math.min(a[0]+o,e),r]]:[[c,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),l()):u()},i.translate=function(t){return arguments.length?(a(t),l()):a()},i.center=function(t){return arguments.length?(o(t),l()):o()},i.clipExtent=function(t){return arguments.length?(null==t?c=n=e=r=null:(c=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),l()):null==c?null:[[c,n],[e,r]]},l()}(Au).scale(961/Ir)};var Ru=function(){return Math.random()},Du=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Ru),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Ru)),Lu=(function t(n){function e(){var t=Du.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Ru),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Ru));(function t(n){function e(t){var e=Lu.source(n)(t);return function(){return e()/t}}return e.source=t,e})(Ru),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Ru);function Uu(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var Pu=Array.prototype,qu=Pu.map,ju=Pu.slice,Fu={name:"implicit"};function Qu(){var t=Er(),n=[],e=[],r=Fu;function i(i){var o=i+"",u=t.get(o);if(!u){if(r!==Fu)return r;t.set(o,u=n.push(i))}return e[(u-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Er();for(var r,o,u=-1,a=e.length;++u<a;)t.has(o=(r=e[u])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=ju.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Qu(n,e).unknown(r)},Uu.apply(i,arguments),i}function zu(){var t,n,e=Qu().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,s=0,c=.5;function l(){var e=r().length,l=o[1]<o[0],h=o[l-0],p=o[1-l];t=(p-h)/Math.max(1,e-a+2*s),u&&(t=Math.floor(t)),h+=(p-h-t*(e-a))*c,n=t*(1-a),u&&(h=Math.round(h),n=Math.round(n));var v=f(e).map((function(n){return h+t*n}));return i(l?v.reverse():v)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),l()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],l()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,l()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,l()):u},e.padding=function(t){return arguments.length?(a=Math.min(1,s=+t),l()):a},e.paddingInner=function(t){return arguments.length?(a=Math.min(1,t),l()):a},e.paddingOuter=function(t){return arguments.length?(s=+t,l()):s},e.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),l()):c},e.copy=function(){return zu(r(),o).round(u).paddingInner(a).paddingOuter(s).align(c)},Uu.apply(l(),arguments)}var Yu=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}},Hu=function(t){return+t},Iu=[0,1];function Xu(t){return t}function $u(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function Vu(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Zu(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=$u(i,r),o=e(u,o)):(r=$u(r,i),o=e(o,u)),function(t){return o(r(t))}}function Bu(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=$u(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=a(t,n,1,r)-1;return o[e](i[e](n))}}function Wu(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Ju(){var t,n,e,r,i,o,u=Iu,a=Iu,s=In,c=Xu;function l(){return r=Math.min(u.length,a.length)>2?Bu:Zu,i=o=null,f}function f(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,s)))(t(c(n)))}return f.invert=function(e){return c(n((o||(o=r(a,u.map(t),qn)))(e)))},f.domain=function(t){return arguments.length?(u=qu.call(t,Hu),c===Xu||(c=Vu(u)),l()):u.slice()},f.range=function(t){return arguments.length?(a=ju.call(t),l()):a.slice()},f.rangeRound=function(t){return a=ju.call(t),s=Yu,l()},f.clamp=function(t){return arguments.length?(c=t?Vu(u):Xu,f):c!==Xu},f.interpolate=function(t){return arguments.length?(s=t,l()):s},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,l()}}function Gu(t,n){return Ju()(t,n)}var Ku=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ta(t){if(!(n=Ku.exec(t)))throw new Error("invalid format: "+t);var n;return new na({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function na(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}ta.prototype=na.prototype,na.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ea,ra,ia,oa,ua=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},aa=function(t){return(t=ua(Math.abs(t)))?t[1]:NaN},sa=function(t,n){var e=ua(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},ca={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return sa(100*t,n)},r:sa,s:function(t,n){var e=ua(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ea=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ua(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},la=function(t){return t},fa=Array.prototype.map,ha=["y","z","a","f","p","n","\xb5","m","","k","M","G","T","P","E","Z","Y"];ra=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?la:(n=fa.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],u=0,a=n[0],s=0;i>0&&a>0&&(s+a+1>r&&(a=Math.max(1,r-s)),o.push(t.substring(i-=a,i+a)),!((s+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",u=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?la:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(fa.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"-":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=ta(t)).fill,e=t.align,f=t.sign,h=t.symbol,p=t.zero,v=t.width,g=t.comma,d=t.precision,y=t.trim,m=t.type;"n"===m?(g=!0,m="g"):ca[m]||(void 0===d&&(d=12),y=!0,m="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",_="$"===h?o:/[%p]/.test(m)?s:"",w=ca[m],x=/[defgprs%]/.test(m);function M(t){var i,o,s,h=b,M=_;if("c"===m)M=w(t)+M,t="";else{var O=(t=+t)<0||1/t<0;if(t=isNaN(t)?l:w(Math.abs(t),d),y&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),O&&0===+t&&"+"!==f&&(O=!1),h=(O?"("===f?f:c:"-"===f||"("===f?"":f)+h,M=("s"===m?ha[8+ea/3]:"")+M+(O&&"("===f?")":""),x)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){M=(46===s?u+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var N=h.length+t.length+M.length,S=N<v?new Array(v-N+1).join(n):"";switch(g&&p&&(t=r(S+t,S.length?v-M.length:1/0),S=""),e){case"<":t=h+t+M+S;break;case"=":t=h+S+t+M;break;case"^":t=S.slice(0,N=S.length>>1)+h+t+M+S.slice(N);break;default:t=S+h+t+M}return a(t)}return d=void 0===d?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),M.toString=function(){return t+""},M}return{format:f,formatPrefix:function(t,n){var e=f(((t=ta(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(aa(n)/3))),i=Math.pow(10,-r),o=ha[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),ia=ra.format,oa=ra.formatPrefix;var pa=function(t,n,e,r){var i,o=y(t,n,e);switch((r=ta(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(aa(n)/3)))-aa(Math.abs(t)))}(o,u))||(r.precision=i),oa(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,aa(n)-aa(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-aa(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return ia(r)};function va(t){var n=t.domain;return t.ticks=function(t){var e=n();return g(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return pa(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],s=i[u];return s<a&&(r=a,a=s,s=r,r=o,o=u,u=r),(r=d(a,s,e))>0?r=d(a=Math.floor(a/r)*r,s=Math.ceil(s/r)*r,e):r<0&&(r=d(a=Math.ceil(a*r)/r,s=Math.floor(s*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(s/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(s*r)/r,n(i)),t},t}function ga(){var t=Gu(Xu,Xu);return t.copy=function(){return Wu(t,ga())},Uu.apply(t,arguments),va(t)}function da(){var t,n=[],e=[],i=[];function o(){var t=0,r=Math.max(1,e.length);for(i=new Array(r-1);++t<r;)i[t-1]=m(n,t/r);return u}function u(n){return isNaN(n=+n)?t:e[a(i,n)]}return u.invertExtent=function(t){var r=e.indexOf(t);return r<0?[NaN,NaN]:[r>0?i[r-1]:n[0],r<i.length?i[r]:n[n.length-1]]},u.domain=function(t){if(!arguments.length)return n.slice();n=[];for(var e,i=0,u=t.length;i<u;++i)null==(e=t[i])||isNaN(e=+e)||n.push(e);return n.sort(r),o()},u.range=function(t){return arguments.length?(e=ju.call(t),o()):e.slice()},u.unknown=function(n){return arguments.length?(t=n,u):t},u.quantiles=function(){return i.slice()},u.copy=function(){return da().domain(n).range(e).unknown(t)},Uu.apply(u,arguments)}var ya=new Date,ma=new Date;function ba(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r)||!(o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return ba((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return ya.setTime(+n),ma.setTime(+r),t(ya),t(ma),Math.floor(e(ya,ma))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t===0}:function(n){return i.count(0,n)%t===0}):i:null}),i}var _a=ba((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));_a.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ba((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var wa=_a,xa=(_a.range,ba((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));xa.range;function Ma(t){return ba((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Oa=Ma(0),Na=Ma(1),Sa=Ma(2),Ca=Ma(3),ka=Ma(4),Ea=Ma(5),Aa=Ma(6),Ta=(Oa.range,Na.range,Sa.range,Ca.range,ka.range,Ea.range,Aa.range,ba((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),Ra=Ta,Da=(Ta.range,ba((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),La=(Da.range,ba((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()}))),Ua=(La.range,ba((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Pa=(Ua.range,ba((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));Pa.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ba((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Pa:null};Pa.range;function qa(t){return ba((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var ja=qa(0),Fa=qa(1),Qa=qa(2),za=qa(3),Ya=qa(4),Ha=qa(5),Ia=qa(6),Xa=(ja.range,Fa.range,Qa.range,za.range,Ya.range,Ha.range,Ia.range,ba((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),$a=Xa,Va=(Xa.range,ba((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Va.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ba((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var Za=Va;Va.range;function Ba(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Wa(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Ja(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var Ga,Ka={"-":"",_:" ",0:"0"},ts=/^\s*\d+/,ns=/^%/,es=/[\\^$*+?|[\]().{}]/g;function rs(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function is(t){return t.replace(es,"\\$&")}function os(t){return new RegExp("^(?:"+t.map(is).join("|")+")","i")}function us(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function as(t,n,e){var r=ts.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function ss(t,n,e){var r=ts.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function cs(t,n,e){var r=ts.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function ls(t,n,e){var r=ts.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function fs(t,n,e){var r=ts.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function hs(t,n,e){var r=ts.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function ps(t,n,e){var r=ts.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function vs(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function gs(t,n,e){var r=ts.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function ds(t,n,e){var r=ts.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function ys(t,n,e){var r=ts.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function ms(t,n,e){var r=ts.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function bs(t,n,e){var r=ts.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function _s(t,n,e){var r=ts.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function ws(t,n,e){var r=ts.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function xs(t,n,e){var r=ts.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Ms(t,n,e){var r=ts.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Os(t,n,e){var r=ns.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Ns(t,n,e){var r=ts.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Ss(t,n,e){var r=ts.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Cs(t,n){return rs(t.getDate(),n,2)}function ks(t,n){return rs(t.getHours(),n,2)}function Es(t,n){return rs(t.getHours()%12||12,n,2)}function As(t,n){return rs(1+Ra.count(wa(t),t),n,3)}function Ts(t,n){return rs(t.getMilliseconds(),n,3)}function Rs(t,n){return Ts(t,n)+"000"}function Ds(t,n){return rs(t.getMonth()+1,n,2)}function Ls(t,n){return rs(t.getMinutes(),n,2)}function Us(t,n){return rs(t.getSeconds(),n,2)}function Ps(t){var n=t.getDay();return 0===n?7:n}function qs(t,n){return rs(Oa.count(wa(t)-1,t),n,2)}function js(t,n){var e=t.getDay();return t=e>=4||0===e?ka(t):ka.ceil(t),rs(ka.count(wa(t),t)+(4===wa(t).getDay()),n,2)}function Fs(t){return t.getDay()}function Qs(t,n){return rs(Na.count(wa(t)-1,t),n,2)}function zs(t,n){return rs(t.getFullYear()%100,n,2)}function Ys(t,n){return rs(t.getFullYear()%1e4,n,4)}function Hs(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+rs(n/60|0,"0",2)+rs(n%60,"0",2)}function Is(t,n){return rs(t.getUTCDate(),n,2)}function Xs(t,n){return rs(t.getUTCHours(),n,2)}function $s(t,n){return rs(t.getUTCHours()%12||12,n,2)}function Vs(t,n){return rs(1+$a.count(Za(t),t),n,3)}function Zs(t,n){return rs(t.getUTCMilliseconds(),n,3)}function Bs(t,n){return Zs(t,n)+"000"}function Ws(t,n){return rs(t.getUTCMonth()+1,n,2)}function Js(t,n){return rs(t.getUTCMinutes(),n,2)}function Gs(t,n){return rs(t.getUTCSeconds(),n,2)}function Ks(t){var n=t.getUTCDay();return 0===n?7:n}function tc(t,n){return rs(ja.count(Za(t)-1,t),n,2)}function nc(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Ya(t):Ya.ceil(t),rs(Ya.count(Za(t),t)+(4===Za(t).getUTCDay()),n,2)}function ec(t){return t.getUTCDay()}function rc(t,n){return rs(Fa.count(Za(t)-1,t),n,2)}function ic(t,n){return rs(t.getUTCFullYear()%100,n,2)}function oc(t,n){return rs(t.getUTCFullYear()%1e4,n,4)}function uc(){return"+0000"}function ac(){return"%"}function sc(t){return+t}function cc(t){return Math.floor(+t/1e3)}!function(t){Ga=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,s=t.shortMonths,c=os(i),l=us(i),f=os(o),h=us(o),p=os(u),v=us(u),g=os(a),d=us(a),y=os(s),m=us(s),b={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Cs,e:Cs,f:Rs,H:ks,I:Es,j:As,L:Ts,m:Ds,M:Ls,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:sc,s:cc,S:Us,u:Ps,U:qs,V:js,w:Fs,W:Qs,x:null,X:null,y:zs,Y:Ys,Z:Hs,"%":ac},_={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Is,e:Is,f:Bs,H:Xs,I:$s,j:Vs,L:Zs,m:Ws,M:Js,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:sc,s:cc,S:Gs,u:Ks,U:tc,V:nc,w:ec,W:rc,x:null,X:null,y:ic,Y:oc,Z:uc,"%":ac},w={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=v[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=d[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return O(t,n,e,r)},d:ys,e:ys,f:Ms,H:bs,I:bs,j:ms,L:xs,m:ds,M:_s,p:function(t,n,e){var r=c.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},q:gs,Q:Ns,s:Ss,S:ws,u:ss,U:cs,V:ls,w:as,W:fs,x:function(t,n,r){return O(t,e,n,r)},X:function(t,n,e){return O(t,r,n,e)},y:ps,Y:hs,Z:vs,"%":Os};function x(t,n){return function(e){var r,i,o,u=[],a=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++a<c;)37===t.charCodeAt(a)&&(u.push(t.slice(s,a)),null!=(i=Ka[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),s=a+1);return u.push(t.slice(s,a)),u.join("")}}function M(t,n){return function(e){var r,i,o=Ja(1900,void 0,1);if(O(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Wa(Ja(o.y,0,1))).getUTCDay(),r=i>4||0===i?Fa.ceil(r):Fa(r),r=$a.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Ba(Ja(o.y,0,1))).getDay(),r=i>4||0===i?Na.ceil(r):Na(r),r=Ra.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Wa(Ja(o.y,0,1)).getUTCDay():Ba(Ja(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Wa(o)):Ba(o)}}function O(t,n,e,r){for(var i,o,u=0,a=n.length,s=e.length;u<a;){if(r>=s)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=w[i in Ka?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=x(e,b),b.X=x(r,b),b.c=x(n,b),_.x=x(e,_),_.X=x(r,_),_.c=x(n,_),{format:function(t){var n=x(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=x(t+="",_);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}(t),Ga.format,Ga.parse,Ga.utcFormat,Ga.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var lc=ba((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),fc=(lc.range,ba((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),hc=(fc.range,ba((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})));hc.range;var pc=function(t){return function(){return t}},vc=Math.abs,gc=Math.atan2,dc=Math.cos,yc=Math.max,mc=Math.min,bc=Math.sin,_c=Math.sqrt,wc=Math.PI,xc=wc/2,Mc=2*wc;function Oc(t){return t>1?0:t<-1?wc:Math.acos(t)}function Nc(t){return t>=1?xc:t<=-1?-xc:Math.asin(t)}function Sc(t){return t.innerRadius}function Cc(t){return t.outerRadius}function kc(t){return t.startAngle}function Ec(t){return t.endAngle}function Ac(t){return t&&t.padAngle}function Tc(t,n,e,r,i,o,u,a){var s=e-t,c=r-n,l=u-i,f=a-o,h=f*s-l*c;if(!(h*h<1e-12))return[t+(h=(l*(n-o)-f*(t-i))/h)*s,n+h*c]}function Rc(t,n,e,r,i,o,u){var a=t-e,s=n-r,c=(u?o:-o)/_c(a*a+s*s),l=c*s,f=-c*a,h=t+l,p=n+f,v=e+l,g=r+f,d=(h+v)/2,y=(p+g)/2,m=v-h,b=g-p,_=m*m+b*b,w=i-o,x=h*g-v*p,M=(b<0?-1:1)*_c(yc(0,w*w*_-x*x)),O=(x*b-m*M)/_,N=(-x*m-b*M)/_,S=(x*b+m*M)/_,C=(-x*m+b*M)/_,k=O-d,E=N-y,A=S-d,T=C-y;return k*k+E*E>A*A+T*T&&(O=S,N=C),{cx:O,cy:N,x01:-l,y01:-f,x11:O*(i/w-1),y11:N*(i/w-1)}}var Dc=function(){var t=Sc,n=Cc,e=pc(0),r=null,i=kc,o=Ec,u=Ac,a=null;function s(){var s,c,l=+t.apply(this,arguments),f=+n.apply(this,arguments),h=i.apply(this,arguments)-xc,p=o.apply(this,arguments)-xc,v=vc(p-h),g=p>h;if(a||(a=s=_r()),f<l&&(c=f,f=l,l=c),f>1e-12)if(v>Mc-1e-12)a.moveTo(f*dc(h),f*bc(h)),a.arc(0,0,f,h,p,!g),l>1e-12&&(a.moveTo(l*dc(p),l*bc(p)),a.arc(0,0,l,p,h,g));else{var d,y,m=h,b=p,_=h,w=p,x=v,M=v,O=u.apply(this,arguments)/2,N=O>1e-12&&(r?+r.apply(this,arguments):_c(l*l+f*f)),S=mc(vc(f-l)/2,+e.apply(this,arguments)),C=S,k=S;if(N>1e-12){var E=Nc(N/l*bc(O)),A=Nc(N/f*bc(O));(x-=2*E)>1e-12?(_+=E*=g?1:-1,w-=E):(x=0,_=w=(h+p)/2),(M-=2*A)>1e-12?(m+=A*=g?1:-1,b-=A):(M=0,m=b=(h+p)/2)}var T=f*dc(m),R=f*bc(m),D=l*dc(w),L=l*bc(w);if(S>1e-12){var U,P=f*dc(b),q=f*bc(b),j=l*dc(_),F=l*bc(_);if(v<wc&&(U=Tc(T,R,j,F,P,q,D,L))){var Q=T-U[0],z=R-U[1],Y=P-U[0],H=q-U[1],I=1/bc(Oc((Q*Y+z*H)/(_c(Q*Q+z*z)*_c(Y*Y+H*H)))/2),X=_c(U[0]*U[0]+U[1]*U[1]);C=mc(S,(l-X)/(I-1)),k=mc(S,(f-X)/(I+1))}}M>1e-12?k>1e-12?(d=Rc(j,F,T,R,f,k,g),y=Rc(P,q,D,L,f,k,g),a.moveTo(d.cx+d.x01,d.cy+d.y01),k<S?a.arc(d.cx,d.cy,k,gc(d.y01,d.x01),gc(y.y01,y.x01),!g):(a.arc(d.cx,d.cy,k,gc(d.y01,d.x01),gc(d.y11,d.x11),!g),a.arc(0,0,f,gc(d.cy+d.y11,d.cx+d.x11),gc(y.cy+y.y11,y.cx+y.x11),!g),a.arc(y.cx,y.cy,k,gc(y.y11,y.x11),gc(y.y01,y.x01),!g))):(a.moveTo(T,R),a.arc(0,0,f,m,b,!g)):a.moveTo(T,R),l>1e-12&&x>1e-12?C>1e-12?(d=Rc(D,L,P,q,l,-C,g),y=Rc(T,R,j,F,l,-C,g),a.lineTo(d.cx+d.x01,d.cy+d.y01),C<S?a.arc(d.cx,d.cy,C,gc(d.y01,d.x01),gc(y.y01,y.x01),!g):(a.arc(d.cx,d.cy,C,gc(d.y01,d.x01),gc(d.y11,d.x11),!g),a.arc(0,0,l,gc(d.cy+d.y11,d.cx+d.x11),gc(y.cy+y.y11,y.cx+y.x11),g),a.arc(y.cx,y.cy,C,gc(y.y11,y.x11),gc(y.y01,y.x01),!g))):a.arc(0,0,l,w,_,g):a.lineTo(D,L)}else a.moveTo(0,0);if(a.closePath(),s)return a=null,s+""||null}return s.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-wc/2;return[dc(r)*e,bc(r)*e]},s.innerRadius=function(n){return arguments.length?(t="function"===typeof n?n:pc(+n),s):t},s.outerRadius=function(t){return arguments.length?(n="function"===typeof t?t:pc(+t),s):n},s.cornerRadius=function(t){return arguments.length?(e="function"===typeof t?t:pc(+t),s):e},s.padRadius=function(t){return arguments.length?(r=null==t?null:"function"===typeof t?t:pc(+t),s):r},s.startAngle=function(t){return arguments.length?(i="function"===typeof t?t:pc(+t),s):i},s.endAngle=function(t){return arguments.length?(o="function"===typeof t?t:pc(+t),s):o},s.padAngle=function(t){return arguments.length?(u="function"===typeof t?t:pc(+t),s):u},s.context=function(t){return arguments.length?(a=null==t?null:t,s):a},s},Lc=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},Uc=function(t){return t},Pc=function(){var t=Uc,n=Lc,e=null,r=pc(0),i=pc(Mc),o=pc(0);function u(u){var a,s,c,l,f,h=u.length,p=0,v=new Array(h),g=new Array(h),d=+r.apply(this,arguments),y=Math.min(Mc,Math.max(-Mc,i.apply(this,arguments)-d)),m=Math.min(Math.abs(y)/h,o.apply(this,arguments)),b=m*(y<0?-1:1);for(a=0;a<h;++a)(f=g[v[a]=a]=+t(u[a],a,u))>0&&(p+=f);for(null!=n?v.sort((function(t,e){return n(g[t],g[e])})):null!=e&&v.sort((function(t,n){return e(u[t],u[n])})),a=0,c=p?(y-h*b)/p:0;a<h;++a,d=l)s=v[a],l=d+((f=g[s])>0?f*c:0)+b,g[s]={data:u[s],index:a,value:f,startAngle:d,endAngle:l,padAngle:m};return g}return u.value=function(n){return arguments.length?(t="function"===typeof n?n:pc(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"===typeof t?t:pc(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"===typeof t?t:pc(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"===typeof t?t:pc(+t),u):o},u};function qc(){this._=null}function jc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Fc(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Qc(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function zc(t){for(;t.L;)t=t.L;return t}qc.prototype={constructor:qc,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=zc(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Fc(this,e),e=(t=e).U),e.C=!1,r.C=!0,Qc(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Qc(this,e),e=(t=e).U),e.C=!1,r.C=!0,Fc(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?zc(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Fc(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Qc(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Fc(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Qc(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Fc(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Qc(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Yc=qc;function Hc(t,n,e,r){var i=[null,null],o=pl.push(i)-1;return i.left=t,i.right=n,e&&Xc(i,t,n,e),r&&Xc(i,n,t,r),fl[t.index].halfedges.push(o),fl[n.index].halfedges.push(o),i}function Ic(t,n,e){var r=[n,e];return r.left=t,r}function Xc(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function $c(t,n,e,r,i){var o,u=t[0],a=t[1],s=u[0],c=u[1],l=0,f=1,h=a[0]-s,p=a[1]-c;if(o=n-s,h||!(o>0)){if(o/=h,h<0){if(o<l)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>l&&(l=o)}if(o=r-s,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>l&&(l=o)}else if(h>0){if(o<l)return;o<f&&(f=o)}if(o=e-c,p||!(o>0)){if(o/=p,p<0){if(o<l)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>l&&(l=o)}if(o=i-c,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>l&&(l=o)}else if(p>0){if(o<l)return;o<f&&(f=o)}return!(l>0||f<1)||(l>0&&(t[0]=[s+l*h,c+l*p]),f<1&&(t[1]=[s+f*h,c+f*p]),!0)}}}}}function Vc(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,s=t[0],c=t.left,l=t.right,f=c[0],h=c[1],p=l[0],v=l[1],g=(f+p)/2,d=(h+v)/2;if(v===h){if(g<n||g>=r)return;if(f>p){if(s){if(s[1]>=i)return}else s=[g,e];o=[g,i]}else{if(s){if(s[1]<e)return}else s=[g,i];o=[g,e]}}else if(a=d-(u=(f-p)/(v-h))*g,u<-1||u>1)if(f>p){if(s){if(s[1]>=i)return}else s=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(s){if(s[1]<e)return}else s=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<v){if(s){if(s[0]>=r)return}else s=[n,u*n+a];o=[r,u*r+a]}else{if(s){if(s[0]<n)return}else s=[r,u*r+a];o=[n,u*n+a]}return t[0]=s,t[1]=o,!0}function Zc(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Bc(t,n){return n[+(n.left!==t.site)]}function Wc(t,n){return n[+(n.left===t.site)]}var Jc,Gc=[];function Kc(){jc(this),this.x=this.y=this.arc=this.site=this.cy=null}function tl(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],s=r[0]-u,c=r[1]-a,l=o[0]-u,f=o[1]-a,h=2*(s*f-c*l);if(!(h>=-gl)){var p=s*s+c*c,v=l*l+f*f,g=(f*p-c*v)/h,d=(s*v-l*p)/h,y=Gc.pop()||new Kc;y.arc=t,y.site=i,y.x=g+u,y.y=(y.cy=d+a)+Math.sqrt(g*g+d*d),t.circle=y;for(var m=null,b=hl._;b;)if(y.y<b.y||y.y===b.y&&y.x<=b.x){if(!b.L){m=b.P;break}b=b.L}else{if(!b.R){m=b;break}b=b.R}hl.insert(m,y),m||(Jc=y)}}}}function nl(t){var n=t.circle;n&&(n.P||(Jc=n.N),hl.remove(n),Gc.push(n),jc(n),t.circle=null)}var el=[];function rl(){jc(this),this.edge=this.site=this.circle=null}function il(t){var n=el.pop()||new rl;return n.site=t,n}function ol(t){nl(t),ll.remove(t),el.push(t),jc(t)}function ul(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];ol(t);for(var s=o;s.circle&&Math.abs(e-s.circle.x)<vl&&Math.abs(r-s.circle.cy)<vl;)o=s.P,a.unshift(s),ol(s),s=o;a.unshift(s),nl(s);for(var c=u;c.circle&&Math.abs(e-c.circle.x)<vl&&Math.abs(r-c.circle.cy)<vl;)u=c.N,a.push(c),ol(c),c=u;a.push(c),nl(c);var l,f=a.length;for(l=1;l<f;++l)c=a[l],s=a[l-1],Xc(c.edge,s.site,c.site,i);s=a[0],(c=a[f-1]).edge=Hc(s.site,c.site,null,i),tl(s),tl(c)}function al(t){for(var n,e,r,i,o=t[0],u=t[1],a=ll._;a;)if((r=sl(a,u)-o)>vl)a=a.L;else{if(!((i=o-cl(a,u))>vl)){r>-vl?(n=a.P,e=a):i>-vl?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){fl[t.index]={site:t,halfedges:[]}}(t);var s=il(t);if(ll.insert(n,s),n||e){if(n===e)return nl(n),e=il(n.site),ll.insert(s,e),s.edge=e.edge=Hc(n.site,s.site),tl(n),void tl(e);if(e){nl(n),nl(e);var c=n.site,l=c[0],f=c[1],h=t[0]-l,p=t[1]-f,v=e.site,g=v[0]-l,d=v[1]-f,y=2*(h*d-p*g),m=h*h+p*p,b=g*g+d*d,_=[(d*m-p*b)/y+l,(h*b-g*m)/y+f];Xc(e.edge,c,v,_),s.edge=Hc(c,t,null,_),e.edge=Hc(t,v,null,_),tl(n),tl(e)}else s.edge=Hc(n.site,s.site)}}function sl(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],s=e[1],c=s-n;if(!c)return a;var l=a-r,f=1/o-1/c,h=l/c;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*c)-s+c/2+i-o/2)))/f+r:(r+a)/2}function cl(t,n){var e=t.N;if(e)return sl(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var ll,fl,hl,pl,vl=1e-6,gl=1e-12;function dl(t,n){return n[1]-t[1]||n[0]-t[0]}function yl(t,n){var e,r,i,o=t.sort(dl).pop();for(pl=[],fl=new Array(t.length),ll=new Yc,hl=new Yc;;)if(i=Jc,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(al(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;ul(i.arc)}if(function(){for(var t,n,e,r,i=0,o=fl.length;i<o;++i)if((t=fl[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=Zc(t,pl[n[e]]);for(u.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],s=+n[1][0],c=+n[1][1];!function(t,n,e,r){for(var i,o=pl.length;o--;)Vc(i=pl[o],t,n,e,r)&&$c(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>vl||Math.abs(i[0][1]-i[1][1])>vl)||delete pl[o]}(u,a,s,c),function(t,n,e,r){var i,o,u,a,s,c,l,f,h,p,v,g,d=fl.length,y=!0;for(i=0;i<d;++i)if(o=fl[i]){for(u=o.site,a=(s=o.halfedges).length;a--;)pl[s[a]]||s.splice(a,1);for(a=0,c=s.length;a<c;)v=(p=Wc(o,pl[s[a]]))[0],g=p[1],f=(l=Bc(o,pl[s[++a%c]]))[0],h=l[1],(Math.abs(v-f)>vl||Math.abs(g-h)>vl)&&(s.splice(a,0,pl.push(Ic(u,p,Math.abs(v-t)<vl&&r-g>vl?[t,Math.abs(f-t)<vl?h:r]:Math.abs(g-r)<vl&&e-v>vl?[Math.abs(h-r)<vl?f:e,r]:Math.abs(v-e)<vl&&g-n>vl?[e,Math.abs(f-e)<vl?h:n]:Math.abs(g-n)<vl&&v-t>vl?[Math.abs(h-n)<vl?f:t,n]:null))-1),++c);c&&(y=!1)}if(y){var m,b,_,w=1/0;for(i=0,y=null;i<d;++i)(o=fl[i])&&(_=(m=(u=o.site)[0]-t)*m+(b=u[1]-n)*b)<w&&(w=_,y=o);if(y){var x=[t,n],M=[t,r],O=[e,r],N=[e,n];y.halfedges.push(pl.push(Ic(u=y.site,x,M))-1,pl.push(Ic(u,M,O))-1,pl.push(Ic(u,O,N))-1,pl.push(Ic(u,N,x))-1)}}for(i=0;i<d;++i)(o=fl[i])&&(o.halfedges.length||delete fl[i])}(u,a,s,c)}this.edges=pl,this.cells=fl,ll=hl=pl=fl=null}yl.prototype={constructor:yl,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return Bc(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a,s,c,l=e.site,f=-1,h=n[i[o-1]],p=h.left===l?h.right:h.left;++f<o;)u=p,p=(h=n[i[f]]).left===l?h.right:h.left,u&&p&&r<u.index&&r<p.index&&(s=u,c=p,((a=l)[0]-c[0])*(s[1]-a[1])-(a[0]-s[0])*(c[1]-a[1])<0)&&t.push([l.data,u.data,p.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var s=t-i.site[0],c=n-i.site[1],l=s*s+c*c;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var s=t-a[0],c=n-a[1],f=s*s+c*c;f<l&&(l=f,u=a.index)}}))}while(null!==u);return o._found=r,null==e||l<=e*e?i.site:null}};Math.SQRT2;function ml(t,n,e){this.k=t,this.x=n,this.y=e}ml.prototype={constructor:ml,scale:function(t){return 1===t?this:new ml(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new ml(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new ml(1,0,0);ml.prototype}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,