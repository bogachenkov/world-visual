(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{372:function(t,n,e){"use strict";var r=e(1),a=e.n(r);e(373);n.a=function(t){var n=t.children;return a.a.createElement("h2",{className:"title"},n)}},373:function(t,n,e){},375:function(t,n,e){"use strict";e.d(n,"e",(function(){return h})),e.d(n,"d",(function(){return y})),e.d(n,"b",(function(){return m})),e.d(n,"f",(function(){return g})),e.d(n,"c",(function(){return b})),e.d(n,"a",(function(){return v}));var r=e(103);function a(){var t=p(['\n  query getRegions {\n    Region(filter: { name_not: "Polar" }) {\n      _id,\n      name,\n      subregions {\n        _id\n        name\n        countries(filter: { population_gt: 1 }) {\n          _id,\n          population\n        }\n      }\n    }\n  }\n']);return a=function(){return t},t}function o(){var t=p(['\n  query getCountryBorders {\n    Country(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n      ...CountryData,\n      alpha3Code,\n      borders {\n        alpha3Code\n      }\n    }\n  }\n  ',"\n"]);return o=function(){return t},t}function i(){var t=p(['\n  query getTimezones {\n    Timezone {\n      _id,\n      name,\n      countries(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n        _id,\n        population\n      }\n    }\n  }\n']);return i=function(){return t},t}function u(){var t=p(['\n  query getCountriesArea {\n    Country(filter: { area_lt: 1500000, population_gt: 1, capital_not: "" }) {\n      ...CountryData,\n      area\n    }\n  }\n  ',"\n"]);return u=function(){return t},t}function c(){var t=p(['\n  query getCountriesDensity {\n      Country(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n      ...CountryData\n      alpha3Code,\n      density: populationDensity,\n      population,\n      area\n    }\n  }\n  ',"\n"]);return c=function(){return t},t}function s(){var t=p(["\n  query getCountriesByPopulation($orderBy:[_CountryOrdering]) {\n    Country(orderBy: $orderBy, first: 10, filter: { population_gte: 1 }) {\n      ...CountryData\n      population,\n      populationDensity\n    }\n  }\n  ","\n"]);return s=function(){return t},t}function l(){var t=p(["\n  query getCountryByName($name: String) {\n    Country(name: $name) {\n      area,\n      demonym,\n      name,\n      nativeName,\n      numericCode,\n      capital,\n      officialLanguages {\n        name\n      }\n      population,\n      populationDensity,\n      subregion {\n        name\n      },\n      borders {\n        name\n      }\n      timezones {\n        name\n      }\n    }\n  }\n"]);return l=function(){return t},t}function f(){var t=p(["\n  fragment CountryData on Country {\n    _id,\n    name\n  }\n"]);return f=function(){return t},t}function p(t,n){return n||(n=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(n)}}))}var d=Object(r.b)(f()),h=(Object(r.b)(l()),Object(r.b)(s(),d)),y=Object(r.b)(c(),d),m=Object(r.b)(u(),d),g=Object(r.b)(i()),b=Object(r.b)(o(),d),v=Object(r.b)(a())},376:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(374);function a(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var i=function(){function t(n,e,a){var i=e.margins,u=e.height,c=e.width;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,"svg",void 0),o(this,"margins",void 0),o(this,"width",void 0),o(this,"height",void 0),o(this,"xAxisGroup",void 0),o(this,"yAxisGroup",void 0),this.margins=i;var s=c||n.clientWidth,l=u||n.clientHeight,f=Math.max(s,1100),p=Math.max(l,a?1100:700);this.width=f-this.margins.left-this.margins.right,this.height=p-this.margins.top-this.margins.bottom,this.svg=r.r(n).append("svg").attr("viewBox","0 0 ".concat(f," ").concat(p)).attr("preserveAspectRatio","xMinYMin meet").append("g"),this.centerChart()}var n,e,i;return n=t,(e=[{key:"addAxisGroups",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t&&(this.xAxisGroup=this.svg.append("g").classed("axis-group",!0).classed("x-axis-group",!0).attr("transform","translate(0, ".concat(this.height,")"))),n&&(this.yAxisGroup=this.svg.append("g").classed("axis-group",!0).classed("y-axis-group",!0))}},{key:"centerChart",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.margins.left,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.margins.top;this.svg.attr("transform","translate(".concat(t,", ").concat(n,")"))}},{key:"wrap",value:function(t,n){t.each((function(){for(var t,e=r.r(this),a=e.text().split(/\s+/).reverse(),o=[],i=0,u=e.attr("y"),c=parseFloat(e.attr("dy")),s=e.text(null).append("tspan").attr("x",0).attr("y",u).attr("dy",c+"em");t=a.pop();)o.push(t),s.text(o.join(" ")),s.node().getComputedTextLength()>n&&(o.pop(),s.text(o.join(" ")),o=[t],s=e.append("tspan").attr("x",0).attr("y",u).attr("dy","".concat(1.1*++i+c,"em")).text(t))}))}},{key:"degToRad",value:function(t){return t*Math.PI/180}},{key:"radToDeg",value:function(t){return 180*t/Math.PI}}])&&a(n.prototype,e),i&&a(n,i),t}()},377:function(t,n,e){"use strict";var r=e(1),a=e.n(r),o=(e(378),Object(r.forwardRef)((function(t,n){var e=t.children,r=t.classNames,o=void 0===r?[]:r;return a.a.createElement("div",{ref:n,className:"chart-wrapper ".concat(o.join(" "))},e)})));n.a=o},378:function(t,n,e){},478:function(t,n){t.exports="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 125.2 125.2' xml:space='preserve'%3E %3Cg%3E %3Cpath fill='%23355c7d' d='M52.65,125.2h19.9c3.3,0,6-2.7,6-6V86.301h3.399c3.301,0,6-2.701,6-6V43.2c0-3.3-2.699-6-6-6H43.25c-3.3,0-6,2.7-6,6v37.101c0,3.299,2.7,6,6,6h3.4V119.2C46.65,122.5,49.25,125.2,52.65,125.2z'/%3E %3Ccircle fill='%23355c7d' cx='62.55' cy='15.7' r='15.7'/%3E %3C/g%3E %3C/svg%3E"},479:function(t,n,e){},480:function(t,n,e){},481:function(t,n,e){},485:function(t,n,e){"use strict";e.r(n);var r=e(1),a=e.n(r),o=e(370),i=e(375),u=e(374),c=e(376),s=e(478),l=e.n(s);function f(t){return(f="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function p(t){return function(t){if(Array.isArray(t))return d(t)}(t)||function(t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,n){if(!t)return;if("string"===typeof t)return d(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return d(t,n)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function h(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function y(t,n){return(y=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function m(t){var n=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var e,r=v(t);if(n){var a=v(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return g(this,e)}}function g(t,n){return!n||"object"!==f(n)&&"function"!==typeof n?b(t):n}function b(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function v(t){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var w=function(t){!function(t,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&y(t,n)}(o,t);var n,e,r,a=m(o);function o(t,n,e){var r,i,u,c;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,o),(r=a.call(this,t,e)).data=n,i=b(r),c=["#033447","#03394e","#044862","#045676","#04738f","#038198","#028ea1","#02a1b6","#02b3ca","#02c4de"],(u="colors")in i?Object.defineProperty(i,u,{value:c,enumerable:!0,configurable:!0,writable:!0}):i[u]=c,r.addAxisGroups(),r.update(),r}return n=o,(e=[{key:"updateData",value:function(t){this.data=t,this.update()}},{key:"formatNumbers",value:function(t){return t>=1e3&&t<1e6?+(t/1e3).toFixed(1)+"K+":t>=1e6&&t<1e9?+(t/1e6).toFixed(1)+"M+":t>=1e9&&t<1e12?+(t/1e9).toFixed(1)+"B+":t>=1e12?+(t/1e12).toFixed(1)+"T+":t.toString()}},{key:"update",value:function(){var t=this,n=u.o().domain([0,u.j(this.data,(function(t){return t.population}))]).range([this.height,0]),e=u.n().domain(this.data.map((function(t){return t.name}))).range([0,this.width]).padding(.3),r=u.c(n).tickSize(-this.width).tickPadding(10),a=u.b(e).tickSize(8).tickPadding(5).tickFormat((function(t){return"United States of America"===t?"USA":"Russian Federation"===t?"Russia":t}));this.yAxisGroup.transition().duration(500).call(r),this.xAxisGroup.call(a).selectAll(".tick text").call(this.wrap,e.bandwidth());var o=p(this.colors).sort((function(){return Math.random()-.5})),i=this.svg.selectAll("g.bar").data(this.data);i.exit().transition().duration(500).attr("height",0).remove(),i.select("rect").transition().duration(500).attr("x",(function(t){return e(t.name)})).attr("y",(function(t){return n(t.population)-1})).attr("width",e.bandwidth).attr("height",(function(e){return t.height-n(e.population)})).attr("fill",(function(t,n){return o[n]})),i.select("g.bar--image").select("image").transition().duration(500).attr("x",(function(t){return e(t.name)+e.bandwidth()-27})).attr("y",(function(t){return n(t.population)-35})),i.select("text").transition().duration(500).attr("x",(function(t){return e(t.name)})).attr("y",(function(t){return n(t.population)-10})).text((function(n){return t.formatNumbers(n.population)}));var c=i.enter().append("g").classed("bar",!0);c.append("rect").attr("x",(function(t){return e(t.name)})).attr("y",this.height-1).attr("width",e.bandwidth).attr("fill",(function(t,n){return o[n]})).attr("opacity",.1).transition().duration(500).attr("y",(function(t){return n(t.population)-1})).attr("height",(function(e){return t.height-n(e.population)})).attr("opacity",.7),c.append("g").classed("bar--image",!0).append("svg:image").attr("xlink:href",l.a).attr("width",30).attr("height",40).attr("x",(function(t){return e(t.name)+e.bandwidth()-27})).attr("y",this.height-35).transition().duration(500).attr("y",(function(t){return n(t.population)-35})),c.append("text").attr("x",(function(t){return e(t.name)})).attr("y",(function(n){return t.height-10})).attr("font-family","'Open Sans', sans-serif").attr("font-size",11).attr("font-weight",700).attr("fill","#355c7d").text((function(n){return t.formatNumbers(n.population)})).transition().duration(500).attr("y",(function(t){return n(t.population)-10}))}}])&&h(n.prototype,e),r&&h(n,r),o}(c.a),x=(e(479),e(377)),O=function(t){var n=t.data,e=Object(r.useRef)(null),o=Object(r.useRef)(null);return Object(r.useEffect)((function(){e.current&&(o.current?o.current.updateData(n):o.current=new w(e.current,n,{margins:{top:100,right:0,bottom:150,left:100}}))}),[n]),a.a.createElement(x.a,{ref:e,classNames:["population-chart"]})},j=(e(480),e(372));e(481);function C(){return(C=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t}).apply(this,arguments)}function _(t,n){if(null==t)return{};var e,r,a=function(t,n){if(null==t)return{};var e,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var S=function(t){var n=t.children,e=t.className,r=_(t,["children","className"]);return a.a.createElement("button",C({className:"button ".concat(e)},r),n)},A=e(60);function E(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"===typeof Symbol||!(Symbol.iterator in Object(t)))return;var e=[],r=!0,a=!1,o=void 0;try{for(var i,u=t[Symbol.iterator]();!(r=(i=u.next()).done)&&(e.push(i.value),!n||e.length!==n);r=!0);}catch(c){a=!0,o=c}finally{try{r||null==u.return||u.return()}finally{if(a)throw o}}return e}(t,n)||function(t,n){if(!t)return;if("string"===typeof t)return k(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return k(t,n)}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function k(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}n.default=function(){var t=E(Object(r.useState)("population_desc"),2),n=t[0],e=t[1],u=Object(o.a)(i.e,{variables:{orderBy:n}}),c=u.data,s=u.loading;return a.a.createElement("section",{className:"population-page"},a.a.createElement("header",{className:"population-page--header"},a.a.createElement(j.a,null,"Top ten countries with the ","population_desc"===n?"largest":"smallest"," population"),a.a.createElement(S,{className:"population-page--btn",onClick:function(t){t.preventDefault(),e((function(t){return"population_desc"===t?"population_asc":"population_desc"}))}},"Show ",a.a.createElement("strong",null,"population_desc"===n?"smallest":"largest"))),s&&!c&&a.a.createElement(A.a,null),c&&a.a.createElement(O,{data:c.Country}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9VSS9UaXRsZS9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2dxbC9xdWVyaWVzLnRzIiwid2VicGFjazovLy8uL3NyYy9kMy1jaGFydC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DaGFydFdyYXBwZXIvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvaW1hZ2VzL3BlcnNvbi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2hhcnRzL1BvcHVsYXRpb25DaGFydC9Qb3B1bGF0aW9uRDNDaGFydC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DaGFydHMvUG9wdWxhdGlvbkNoYXJ0L2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9VSS9CdXR0b24vaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9Qb3B1bGF0aW9uUGFnZS9pbmRleC50c3giXSwibmFtZXMiOlsiVGl0bGUiLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsImNvdW50cnlGcmFnbWVudCIsImdxbCIsIkdFVF9DT1VOVFJJRVNfUE9QVUxBVElPTiIsIkdFVF9DT1VOVFJJRVNfREVOU0lUWSIsIkdFVF9DT1VOVFJJRVNfQVJFQSIsIkdFVF9USU1FWk9ORVMiLCJHRVRfQ09VTlRSSUVTX0JPUkRFUlMiLCJHRVRfQ09OVElORU5UUyIsIkQzQ2hhcnQiLCJlbGVtZW50IiwidmVydGljYWxTY3JlZW4iLCJtYXJnaW5zIiwiaGVpZ2h0Iiwid2lkdGgiLCJ0aGlzIiwic3ZnV2lkdGgiLCJjbGllbnRXaWR0aCIsInN2Z0hlaWdodCIsImNsaWVudEhlaWdodCIsInZpZXdCb3hXaWR0aCIsIk1hdGgiLCJtYXgiLCJ2aWV3Qm94SGVpZ2h0IiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwic3ZnIiwiZDMiLCJhcHBlbmQiLCJhdHRyIiwiY2VudGVyQ2hhcnQiLCJ4IiwieSIsInhBeGlzR3JvdXAiLCJjbGFzc2VkIiwieUF4aXNHcm91cCIsInRleHQiLCJlYWNoIiwid29yZCIsIndvcmRzIiwic3BsaXQiLCJyZXZlcnNlIiwibGluZSIsImxpbmVOdW1iZXIiLCJkeSIsInBhcnNlRmxvYXQiLCJ0c3BhbiIsInBvcCIsInB1c2giLCJqb2luIiwibm9kZSIsImdldENvbXB1dGVkVGV4dExlbmd0aCIsImRlZyIsIlBJIiwicmFkIiwiQ2hhcnRXcmFwcGVyIiwiZm9yd2FyZFJlZiIsInJlZiIsImNsYXNzTmFtZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiUG9wdWxhdGlvbkQzQ2hhcnQiLCJkYXRhIiwiZGltZW5zaW9ucyIsImFkZEF4aXNHcm91cHMiLCJ1cGRhdGUiLCJuIiwidG9GaXhlZCIsInRvU3RyaW5nIiwiZG9tYWluIiwiZCIsInBvcHVsYXRpb24iLCJyYW5nZSIsIm1hcCIsIm5hbWUiLCJwYWRkaW5nIiwieUF4aXNDYWxsIiwidGlja1NpemUiLCJ0aWNrUGFkZGluZyIsInhBeGlzQ2FsbCIsInRpY2tGb3JtYXQiLCJ2YWwiLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJjYWxsIiwic2VsZWN0QWxsIiwid3JhcCIsImJhbmR3aWR0aCIsInNodWZmbGVkQ29sb3JzIiwiY29sb3JzIiwic29ydCIsInJhbmRvbSIsImJhckdyb3VwcyIsImV4aXQiLCJyZW1vdmUiLCJzZWxlY3QiLCJfIiwiaSIsImZvcm1hdE51bWJlcnMiLCJlbnRlcmVkQmFyR3JvdXBzIiwiZW50ZXIiLCJwZXJzb25JY29uIiwiUG9wdWxhdGlvbkNoYXJ0IiwiY2hhcnRFbGVtUmVmIiwidXNlUmVmIiwiY2hhcnRJbnN0YW5jZVJlZiIsInVzZUVmZmVjdCIsImN1cnJlbnQiLCJ1cGRhdGVEYXRhIiwiQnV0dG9uIiwiYnRuUHJvcHMiLCJQb3B1bGF0aW9uUGFnZSIsInVzZVN0YXRlIiwib3JkZXJCeSIsInNldE9yZGVyQnkiLCJ1c2VRdWVyeSIsInZhcmlhYmxlcyIsImxvYWRpbmci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QkFDaEIsa0JBQUNGLEVBQUEsRUFBRCxtQ0FDMkMsb0JBQVpxSCxFQUFnQyxVQUFZLFdBRDNFLGVBR0Esa0JBQUMsRUFBRCxDQUFRbkgsVUFBVSx1QkFBdUJ3SCxRQVh4QixTQUFDQyxHQUN0QkEsRUFBRUMsaUJBQ0ZOLEdBQVcsU0FBQUQsR0FBTyxNQUFnQixvQkFBWkEsRUFBZ0MsaUJBQW1CLHVCQVNyRSxRQUNPLGdDQUFzQixvQkFBWkEsRUFBZ0MsV0FBYSxhQUc3REksSUFBWXZELEdBQVMsa0JBQUMyRCxFQUFBLEVBQUQsTUFDdEIzRCxHQUFRLGtCQUFDLEVBQUQsQ0FBaUJBLEtBQU1BLEVBQUs0RCIsImZpbGUiOiJzdGF0aWMvanMvNC5lOTAzMjQ4Mi5jaHVuay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJy4vdGl0bGUuc2Nzcyc7XG5cbmNvbnN0IFRpdGxlOlJlYWN0LkZDID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxoMiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxuICAgICAgeyBjaGlsZHJlbiB9XG4gICAgPC9oMj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRpdGxlOyIsImltcG9ydCB7IGdxbCB9IGZyb20gJ2Fwb2xsby1ib29zdCc7XG5cbmNvbnN0IGNvdW50cnlGcmFnbWVudCA9IGdxbGBcbiAgZnJhZ21lbnQgQ291bnRyeURhdGEgb24gQ291bnRyeSB7XG4gICAgX2lkLFxuICAgIG5hbWVcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEdFVF9DT1VOVFJZX0JZX05BTUUgPSBncWxgXG4gIHF1ZXJ5IGdldENvdW50cnlCeU5hbWUoJG5hbWU6IFN0cmluZykge1xuICAgIENvdW50cnkobmFtZTogJG5hbWUpIHtcbiAgICAgIGFyZWEsXG4gICAgICBkZW1vbnltLFxuICAgICAgbmFtZSxcbiAgICAgIG5hdGl2ZU5hbWUsXG4gICAgICBudW1lcmljQ29kZSxcbiAgICAgIGNhcGl0YWwsXG4gICAgICBvZmZpY2lhbExhbmd1YWdlcyB7XG4gICAgICAgIG5hbWVcbiAgICAgIH1cbiAgICAgIHBvcHVsYXRpb24sXG4gICAgICBwb3B1bGF0aW9uRGVuc2l0eSxcbiAgICAgIHN1YnJlZ2lvbiB7XG4gICAgICAgIG5hbWVcbiAgICAgIH0sXG4gICAgICBib3JkZXJzIHtcbiAgICAgICAgbmFtZVxuICAgICAgfVxuICAgICAgdGltZXpvbmVzIHtcbiAgICAgICAgbmFtZVxuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEdFVF9DT1VOVFJJRVNfUE9QVUxBVElPTiA9IGdxbGBcbiAgcXVlcnkgZ2V0Q291bnRyaWVzQnlQb3B1bGF0aW9uKCRvcmRlckJ5OltfQ291bnRyeU9yZGVyaW5nXSkge1xuICAgIENvdW50cnkob3JkZXJCeTogJG9yZGVyQnksIGZpcnN0OiAxMCwgZmlsdGVyOiB7IHBvcHVsYXRpb25fZ3RlOiAxIH0pIHtcbiAgICAgIC4uLkNvdW50cnlEYXRhXG4gICAgICBwb3B1bGF0aW9uLFxuICAgICAgcG9wdWxhdGlvbkRlbnNpdHlcbiAgICB9XG4gIH1cbiAgJHtjb3VudHJ5RnJhZ21lbnR9XG5gO1xuXG5leHBvcnQgY29uc3QgR0VUX0NPVU5UUklFU19ERU5TSVRZID0gZ3FsYFxuICBxdWVyeSBnZXRDb3VudHJpZXNEZW5zaXR5IHtcbiAgICAgIENvdW50cnkoZmlsdGVyOiB7IGFyZWFfZ3Q6IDEsIHBvcHVsYXRpb25fZ3Q6IDEsIGNhcGl0YWxfbm90OiBcIlwiIH0pIHtcbiAgICAgIC4uLkNvdW50cnlEYXRhXG4gICAgICBhbHBoYTNDb2RlLFxuICAgICAgZGVuc2l0eTogcG9wdWxhdGlvbkRlbnNpdHksXG4gICAgICBwb3B1bGF0aW9uLFxuICAgICAgYXJlYVxuICAgIH1cbiAgfVxuICAke2NvdW50cnlGcmFnbWVudH1cbmA7XG5cbmV4cG9ydCBjb25zdCBHRVRfQ09VTlRSSUVTX0FSRUEgPSBncWxgXG4gIHF1ZXJ5IGdldENvdW50cmllc0FyZWEge1xuICAgIENvdW50cnkoZmlsdGVyOiB7IGFyZWFfbHQ6IDE1MDAwMDAsIHBvcHVsYXRpb25fZ3Q6IDEsIGNhcGl0YWxfbm90OiBcIlwiIH0pIHtcbiAgICAgIC4uLkNvdW50cnlEYXRhLFxuICAgICAgYXJlYVxuICAgIH1cbiAgfVxuICAke2NvdW50cnlGcmFnbWVudH1cbmA7XG5cbmV4cG9ydCBjb25zdCBHRVRfVElNRVpPTkVTID0gZ3FsYFxuICBxdWVyeSBnZXRUaW1lem9uZXMge1xuICAgIFRpbWV6b25lIHtcbiAgICAgIF9pZCxcbiAgICAgIG5hbWUsXG4gICAgICBjb3VudHJpZXMoZmlsdGVyOiB7IGFyZWFfZ3Q6IDEsIHBvcHVsYXRpb25fZ3Q6IDEsIGNhcGl0YWxfbm90OiBcIlwiIH0pIHtcbiAgICAgICAgX2lkLFxuICAgICAgICBwb3B1bGF0aW9uXG4gICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgR0VUX0NPVU5UUklFU19CT1JERVJTID0gZ3FsYFxuICBxdWVyeSBnZXRDb3VudHJ5Qm9yZGVycyB7XG4gICAgQ291bnRyeShmaWx0ZXI6IHsgYXJlYV9ndDogMSwgcG9wdWxhdGlvbl9ndDogMSwgY2FwaXRhbF9ub3Q6IFwiXCIgfSkge1xuICAgICAgLi4uQ291bnRyeURhdGEsXG4gICAgICBhbHBoYTNDb2RlLFxuICAgICAgYm9yZGVycyB7XG4gICAgICAgIGFscGhhM0NvZGVcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgJHtjb3VudHJ5RnJhZ21lbnR9XG5gO1xuXG5leHBvcnQgY29uc3QgR0VUX0NPTlRJTkVOVFMgPSBncWxgXG4gIHF1ZXJ5IGdldFJlZ2lvbnMge1xuICAgIFJlZ2lvbihmaWx0ZXI6IHsgbmFtZV9ub3Q6IFwiUG9sYXJcIiB9KSB7XG4gICAgICBfaWQsXG4gICAgICBuYW1lLFxuICAgICAgc3VicmVnaW9ucyB7XG4gICAgICAgIF9pZFxuICAgICAgICBuYW1lXG4gICAgICAgIGNvdW50cmllcyhmaWx0ZXI6IHsgcG9wdWxhdGlvbl9ndDogMSB9KSB7XG4gICAgICAgICAgX2lkLFxuICAgICAgICAgIHBvcHVsYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuYDsiLCJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1hcmdpbnMge1xuICB0b3A6IG51bWJlcjtcbiAgcmlnaHQ6IG51bWJlcjtcbiAgYm90dG9tOiBudW1iZXI7XG4gIGxlZnQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ2hhcnREaW1lbnNpb25zIHtcbiAgbWFyZ2luczogSU1hcmdpbnM7XG4gIHdpZHRoPzogbnVtYmVyO1xuICBoZWlnaHQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIEQzU2VsZWN0aW9uID0gZDMuU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIGFueSwgYW55PjsgXG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEQzQ2hhcnQge1xuICBwcm90ZWN0ZWQgc3ZnOiBEM1NlbGVjdGlvbjtcbiAgcHJvdGVjdGVkIG1hcmdpbnM6SU1hcmdpbnM7XG4gIHByb3RlY3RlZCB3aWR0aDpudW1iZXI7XG4gIHByb3RlY3RlZCBoZWlnaHQ6bnVtYmVyO1xuICBwcm90ZWN0ZWQgeEF4aXNHcm91cCE6IEQzU2VsZWN0aW9uO1xuICBwcm90ZWN0ZWQgeUF4aXNHcm91cCE6IEQzU2VsZWN0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50LFxuICAgIHsgbWFyZ2lucywgaGVpZ2h0LCB3aWR0aCB9OiBJQ2hhcnREaW1lbnNpb25zLFxuICAgIHZlcnRpY2FsU2NyZWVuPzogYm9vbGVhblxuICApIHtcbiAgICB0aGlzLm1hcmdpbnMgPSBtYXJnaW5zO1xuXG4gICAgY29uc3Qgc3ZnV2lkdGggPSAod2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCk7XG4gICAgY29uc3Qgc3ZnSGVpZ2h0ID0gKGhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCk7XG5cbiAgICBjb25zdCB2aWV3Qm94V2lkdGggPSBNYXRoLm1heChzdmdXaWR0aCwgMTEwMCk7XG4gICAgY29uc3Qgdmlld0JveEhlaWdodCA9IE1hdGgubWF4KHN2Z0hlaWdodCwgdmVydGljYWxTY3JlZW4gPyAxMTAwIDogNzAwKTtcblxuICAgIHRoaXMud2lkdGggPSB2aWV3Qm94V2lkdGggLSB0aGlzLm1hcmdpbnMubGVmdCAtIHRoaXMubWFyZ2lucy5yaWdodDtcbiAgICB0aGlzLmhlaWdodCA9IHZpZXdCb3hIZWlnaHQgLSB0aGlzLm1hcmdpbnMudG9wIC0gdGhpcy5tYXJnaW5zLmJvdHRvbTtcblxuICAgIHRoaXMuc3ZnID0gXG4gICAgICBkMy5zZWxlY3QoZWxlbWVudClcbiAgICAgICAgLmFwcGVuZCgnc3ZnJylcbiAgICAgICAgICAuYXR0cigndmlld0JveCcsIGAwIDAgJHt2aWV3Qm94V2lkdGh9ICR7dmlld0JveEhlaWdodH1gKVxuICAgICAgICAgIC5hdHRyKFwicHJlc2VydmVBc3BlY3RSYXRpb1wiLCBcInhNaW5ZTWluIG1lZXRcIilcbiAgICAgICAgLmFwcGVuZCgnZycpO1xuICAgIHRoaXMuY2VudGVyQ2hhcnQoKTtcbiAgfVxuICBcbiAgcHJvdGVjdGVkIGFkZEF4aXNHcm91cHMoeDogYm9vbGVhbiA9IHRydWUsIHk6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XG4gICAgaWYgKHgpIHtcbiAgICAgIHRoaXMueEF4aXNHcm91cCA9IHRoaXMuc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgIC5jbGFzc2VkKCdheGlzLWdyb3VwJywgdHJ1ZSlcbiAgICAgICAgLmNsYXNzZWQoJ3gtYXhpcy1ncm91cCcsIHRydWUpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsICR7dGhpcy5oZWlnaHR9KWApO1xuICAgIH1cbiAgICBpZiAoeSkge1xuICAgICAgdGhpcy55QXhpc0dyb3VwID0gdGhpcy5zdmcuYXBwZW5kKCdnJylcbiAgICAgICAgLmNsYXNzZWQoJ2F4aXMtZ3JvdXAnLCB0cnVlKVxuICAgICAgICAuY2xhc3NlZCgneS1heGlzLWdyb3VwJywgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGNlbnRlckNoYXJ0KGxlZnQ6IG51bWJlciA9IHRoaXMubWFyZ2lucy5sZWZ0LCB0b3A6IG51bWJlciA9IHRoaXMubWFyZ2lucy50b3ApOnZvaWQge1xuICAgIHRoaXMuc3ZnLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtsZWZ0fSwgJHt0b3B9KWApXG4gIH1cblxuICBwcm90ZWN0ZWQgd3JhcCh0ZXh0OiBkMy5TZWxlY3Rpb248ZDMuQmFzZVR5cGUsIHVua25vd24sIFNWR0dFbGVtZW50LCBhbnk+LCB3aWR0aDogbnVtYmVyKSB7XG4gICAgdGV4dC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRleHQgPSBkMy5zZWxlY3QodGhpcyksXG4gICAgICAgICAgd29yZHMgPSB0ZXh0LnRleHQoKS5zcGxpdCgvXFxzKy8pLnJldmVyc2UoKSxcbiAgICAgICAgICB3b3JkLFxuICAgICAgICAgIGxpbmU6IHN0cmluZ1tdID0gW10sXG4gICAgICAgICAgbGluZU51bWJlciA9IDAsXG4gICAgICAgICAgbGluZUhlaWdodCA9IDEuMSwgLy8gZW1zXG4gICAgICAgICAgeSA9IHRleHQuYXR0cihcInlcIiksXG4gICAgICAgICAgZHkgPSBwYXJzZUZsb2F0KHRleHQuYXR0cihcImR5XCIpKSxcbiAgICAgICAgICB0c3BhbiA9IHRleHQudGV4dChudWxsKS5hcHBlbmQoXCJ0c3BhblwiKS5hdHRyKFwieFwiLCAwKS5hdHRyKFwieVwiLCB5KS5hdHRyKFwiZHlcIiwgZHkgKyBcImVtXCIpXG4gICAgICB3aGlsZSAod29yZCA9IHdvcmRzLnBvcCgpKSB7XG4gICAgICAgIGxpbmUucHVzaCh3b3JkKVxuICAgICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbihcIiBcIikpXG4gICAgICAgIGlmICh0c3Bhbi5ub2RlKCkhLmdldENvbXB1dGVkVGV4dExlbmd0aCgpID4gd2lkdGgpIHtcbiAgICAgICAgICBsaW5lLnBvcCgpXG4gICAgICAgICAgdHNwYW4udGV4dChsaW5lLmpvaW4oXCIgXCIpKVxuICAgICAgICAgIGxpbmUgPSBbd29yZF1cbiAgICAgICAgICB0c3BhbiA9IHRleHQuYXBwZW5kKFwidHNwYW5cIikuYXR0cihcInhcIiwgMCkuYXR0cihcInlcIiwgeSkuYXR0cihcImR5XCIsIGAkeysrbGluZU51bWJlciAqIGxpbmVIZWlnaHQgKyBkeX1lbWApLnRleHQod29yZClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBwcm90ZWN0ZWQgZGVnVG9SYWQoZGVnOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBkZWcgKiBNYXRoLlBJIC8gMTgwO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJhZFRvRGVnKHJhZDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcmFkICogMTgwIC8gTWF0aC5QSTtcbiAgfVxufSIsImltcG9ydCBSZWFjdCwgeyBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICcuL2NoYXJ0LXdyYXBwZXIuc2Nzcyc7XG5cbmludGVyZmFjZSBJQ2hhcnRXcmFwcGVyUHJvcHMge1xuICBjbGFzc05hbWVzPzogc3RyaW5nW107XG59XG5cbmNvbnN0IENoYXJ0V3JhcHBlciA9IGZvcndhcmRSZWY8SFRNTERpdkVsZW1lbnQsIElDaGFydFdyYXBwZXJQcm9wcz4oKHsgY2hpbGRyZW4sIGNsYXNzTmFtZXMgPSBbXSB9LCByZWYpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IHJlZj17cmVmfSBjbGFzc05hbWU9e2BjaGFydC13cmFwcGVyICR7Y2xhc3NOYW1lcy5qb2luKCcgJyl9YH0+XG4gICAgICB7IGNoaWxkcmVuIH1cbiAgICA8L2Rpdj5cbiAgKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDaGFydFdyYXBwZXI7IiwibW9kdWxlLmV4cG9ydHMgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgMTI1LjIgMTI1LjInIHhtbDpzcGFjZT0ncHJlc2VydmUnJTNFICUzQ2clM0UgJTNDcGF0aCBmaWxsPSclMjMzNTVjN2QnIGQ9J001Mi42NSwxMjUuMmgxOS45YzMuMywwLDYtMi43LDYtNlY4Ni4zMDFoMy4zOTljMy4zMDEsMCw2LTIuNzAxLDYtNlY0My4yYzAtMy4zLTIuNjk5LTYtNi02SDQzLjI1Yy0zLjMsMC02LDIuNy02LDZ2MzcuMTAxYzAsMy4yOTksMi43LDYsNiw2aDMuNFYxMTkuMkM0Ni42NSwxMjIuNSw0OS4yNSwxMjUuMiw1Mi42NSwxMjUuMnonLyUzRSAlM0NjaXJjbGUgZmlsbD0nJTIzMzU1YzdkJyBjeD0nNjIuNTUnIGN5PScxNS43JyByPScxNS43Jy8lM0UgJTNDL2clM0UgJTNDL3N2ZyUzRVwiIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IEQzQ2hhcnQsIHsgSUNoYXJ0RGltZW5zaW9ucyB9IGZyb20gXCJAZDMtY2hhcnRcIjtcbmltcG9ydCB7IElDb3VudHJ5UG9wdWxhdGlvbiB9IGZyb20gXCJAdHlwZXNcIjtcblxuaW1wb3J0IHBlcnNvbkljb24gZnJvbSAnQGltYWdlcy9wZXJzb24uc3ZnJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdWxhdGlvbkQzQ2hhcnQgZXh0ZW5kcyBEM0NoYXJ0IHtcbiAgcHJpdmF0ZSBjb2xvcnMgPSBbXCIjMDMzNDQ3XCIsXCIjMDMzOTRlXCIsXCIjMDQ0ODYyXCIsXCIjMDQ1Njc2XCIsXCIjMDQ3MzhmXCIsXCIjMDM4MTk4XCIsXCIjMDI4ZWExXCIsXCIjMDJhMWI2XCIsXCIjMDJiM2NhXCIsXCIjMDJjNGRlXCJdO1xuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRGl2RWxlbWVudCwgcHJpdmF0ZSBkYXRhOiBJQ291bnRyeVBvcHVsYXRpb25bXSwgZGltZW5zaW9uczogSUNoYXJ0RGltZW5zaW9ucykge1xuICAgIHN1cGVyKGVsZW1lbnQsIGRpbWVuc2lvbnMpO1xuICAgIHRoaXMuYWRkQXhpc0dyb3VwcygpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICB1cGRhdGVEYXRhKGRhdGE6IElDb3VudHJ5UG9wdWxhdGlvbltdKTp2b2lkIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdE51bWJlcnMobjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAobiA+PSAxZTMgJiYgbiA8IDFlNikgcmV0dXJuICsobiAvIDFlMykudG9GaXhlZCgxKSArIFwiSytcIjtcbiAgICBpZiAobiA+PSAxZTYgJiYgbiA8IDFlOSkgcmV0dXJuICsobiAvIDFlNikudG9GaXhlZCgxKSArIFwiTStcIjtcbiAgICBpZiAobiA+PSAxZTkgJiYgbiA8IDFlMTIpIHJldHVybiArKG4gLyAxZTkpLnRvRml4ZWQoMSkgKyBcIkIrXCI7XG4gICAgaWYgKG4gPj0gMWUxMikgcmV0dXJuICsobiAvIDFlMTIpLnRvRml4ZWQoMSkgKyBcIlQrXCI7XG4gICAgcmV0dXJuIG4udG9TdHJpbmcoKVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGUoKTp2b2lkIHtcbiAgICBjb25zdCB5ID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgLmRvbWFpbihbIDAsIGQzLm1heCh0aGlzLmRhdGEsIGQgPT4gZC5wb3B1bGF0aW9uKSEgXSlcbiAgICAgIC5yYW5nZShbdGhpcy5oZWlnaHQsIDBdKTtcbiAgICBjb25zdCB4ID0gZDMuc2NhbGVCYW5kKClcbiAgICAgIC5kb21haW4odGhpcy5kYXRhLm1hcChkID0+IGQubmFtZSkpXG4gICAgICAucmFuZ2UoWzAsIHRoaXMud2lkdGhdKVxuICAgICAgLnBhZGRpbmcoMC4zKTtcblxuICAgIGNvbnN0IHlBeGlzQ2FsbCA9IGQzLmF4aXNMZWZ0KHkpXG4gICAgICAudGlja1NpemUoLXRoaXMud2lkdGgpXG4gICAgICAudGlja1BhZGRpbmcoMTApO1xuICAgIGNvbnN0IHhBeGlzQ2FsbCA9IGQzLmF4aXNCb3R0b20oeClcbiAgICAgIC50aWNrU2l6ZSg4KVxuICAgICAgLnRpY2tQYWRkaW5nKDUpXG4gICAgICAudGlja0Zvcm1hdCh2YWwgPT4ge1xuICAgICAgICBpZiAodmFsID09PSAnVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhJykgcmV0dXJuICdVU0EnO1xuICAgICAgICBpZiAodmFsID09PSAnUnVzc2lhbiBGZWRlcmF0aW9uJykgcmV0dXJuICdSdXNzaWEnO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLnlBeGlzR3JvdXAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkuY2FsbCh5QXhpc0NhbGwpO1xuICAgIHRoaXMueEF4aXNHcm91cC5jYWxsKHhBeGlzQ2FsbCkuc2VsZWN0QWxsKCcudGljayB0ZXh0JykuY2FsbCh0aGlzLndyYXAsIHguYmFuZHdpZHRoKCkpO1xuXG4gICAgY29uc3Qgc2h1ZmZsZWRDb2xvcnMgPSBbLi4udGhpcy5jb2xvcnNdLnNvcnQoKCkgPT4gTWF0aC5yYW5kb20oKSAtIDAuNSk7XG5cbiAgICBjb25zdCBiYXJHcm91cHMgPSB0aGlzLnN2Zy5zZWxlY3RBbGwoJ2cuYmFyJykuZGF0YSh0aGlzLmRhdGEpO1xuICAgIGJhckdyb3Vwcy5leGl0KCkudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkuYXR0cignaGVpZ2h0JywgMCkucmVtb3ZlKCk7XG5cbiAgICBiYXJHcm91cHNcbiAgICAgIC5zZWxlY3QoJ3JlY3QnKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgICAgLmF0dHIoJ3gnLCBkID0+IHgoZC5uYW1lKSEpXG4gICAgICAgIC5hdHRyKCd5JywgZCA9PiB5KGQucG9wdWxhdGlvbikgLSAxKVxuICAgICAgICAuYXR0cignd2lkdGgnLCB4LmJhbmR3aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGQgPT4gdGhpcy5oZWlnaHQgLSB5KGQucG9wdWxhdGlvbikpXG4gICAgICAgIC5hdHRyKCdmaWxsJywgKF8sIGkpID0+IHNodWZmbGVkQ29sb3JzW2ldKTtcbiAgICBcbiAgICBiYXJHcm91cHNcbiAgICAgIC5zZWxlY3QoJ2cuYmFyLS1pbWFnZScpXG4gICAgICAuc2VsZWN0KCdpbWFnZScpXG4gICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMClcbiAgICAgICAgLmF0dHIoJ3gnLCBkID0+IHgoZC5uYW1lKSEgKyB4LmJhbmR3aWR0aCgpIC0gMjcpXG4gICAgICAgIC5hdHRyKCd5JywgZCA9PiB5KGQucG9wdWxhdGlvbikgLSAzNSk7XG5cbiAgICBiYXJHcm91cHMuc2VsZWN0KCd0ZXh0JylcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbig1MDApXG4gICAgICAuYXR0cigneCcsIGQgPT4geChkLm5hbWUpISlcbiAgICAgIC5hdHRyKCd5JywgZCA9PiB5KGQucG9wdWxhdGlvbikgLSAxMClcbiAgICAgIC50ZXh0KGQgPT4gdGhpcy5mb3JtYXROdW1iZXJzKGQucG9wdWxhdGlvbikpXG5cbiAgICBjb25zdCBlbnRlcmVkQmFyR3JvdXBzID0gYmFyR3JvdXBzLmVudGVyKCkuYXBwZW5kKCdnJykuY2xhc3NlZCgnYmFyJywgdHJ1ZSk7XG4gICAgICBcbiAgICBlbnRlcmVkQmFyR3JvdXBzLmFwcGVuZCgncmVjdCcpXG4gICAgICAuYXR0cigneCcsIGQgPT4geChkLm5hbWUpISlcbiAgICAgIC5hdHRyKCd5JywgdGhpcy5oZWlnaHQgLSAxKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgeC5iYW5kd2lkdGgpXG4gICAgICAuYXR0cignZmlsbCcsIChfLCBpKSA9PiBzaHVmZmxlZENvbG9yc1tpXSlcbiAgICAgIC5hdHRyKCdvcGFjaXR5JywgLjEpXG4gICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMClcbiAgICAgICAgLmF0dHIoJ3knLCBkID0+IHkoZC5wb3B1bGF0aW9uKSAtIDEpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBkID0+IHRoaXMuaGVpZ2h0IC0geShkLnBvcHVsYXRpb24pKVxuICAgICAgICAuYXR0cignb3BhY2l0eScsIC43KTtcblxuICAgIGVudGVyZWRCYXJHcm91cHMuYXBwZW5kKCdnJykuY2xhc3NlZCgnYmFyLS1pbWFnZScsIHRydWUpXG4gICAgICAuYXBwZW5kKCdzdmc6aW1hZ2UnKVxuICAgICAgICAuYXR0cigneGxpbms6aHJlZicsIHBlcnNvbkljb24pXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIDMwKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgNDApXG4gICAgICAgIC5hdHRyKCd4JywgZCA9PiB4KGQubmFtZSkhICsgeC5iYW5kd2lkdGgoKSAtIDI3KVxuICAgICAgICAuYXR0cigneScsIHRoaXMuaGVpZ2h0IC0gMzUpXG4gICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKVxuICAgICAgICAgIC5hdHRyKCd5JywgZCA9PiB5KGQucG9wdWxhdGlvbikgLSAzNSk7XG5cbiAgICBlbnRlcmVkQmFyR3JvdXBzLmFwcGVuZCgndGV4dCcpXG4gICAgICAgIC5hdHRyKCd4JywgZCA9PiB4KGQubmFtZSkhKVxuICAgICAgICAuYXR0cigneScsIGQgPT4gdGhpcy5oZWlnaHQgLSAxMClcbiAgICAgICAgLmF0dHIoJ2ZvbnQtZmFtaWx5JywgXCInT3BlbiBTYW5zJywgc2Fucy1zZXJpZlwiKVxuICAgICAgICAuYXR0cignZm9udC1zaXplJywgMTEpXG4gICAgICAgIC5hdHRyKCdmb250LXdlaWdodCcsIDcwMClcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnIzM1NWM3ZCcpXG4gICAgICAgIC50ZXh0KGQgPT4gdGhpcy5mb3JtYXROdW1iZXJzKGQucG9wdWxhdGlvbikpXG4gICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKVxuICAgICAgICAgIC5hdHRyKCd5JywgZCA9PiB5KGQucG9wdWxhdGlvbikgLSAxMClcbiAgICAgICAgXG4gIH1cbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUG9wdWxhdGlvbkQzQ2hhcnQgZnJvbSAnLi9Qb3B1bGF0aW9uRDNDaGFydCc7XG5cbmltcG9ydCB7IElDb3VudHJ5UG9wdWxhdGlvbiB9IGZyb20gJ0B0eXBlcyc7XG5cbmltcG9ydCAnLi9wb3B1bGF0aW9uLWNoYXJ0LnNjc3MnO1xuaW1wb3J0IENoYXJ0V3JhcHBlciBmcm9tICdAL0NoYXJ0V3JhcHBlcic7XG5cbmludGVyZmFjZSBJQ2hhcnRQcm9wcyB7XG4gIGRhdGE6IElDb3VudHJ5UG9wdWxhdGlvbltdO1xufVxuXG5jb25zdCBQb3B1bGF0aW9uQ2hhcnQ6UmVhY3QuRkM8SUNoYXJ0UHJvcHM+ID0gKHsgZGF0YSB9KSA9PiB7XG4gIGNvbnN0IGNoYXJ0RWxlbVJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGNoYXJ0SW5zdGFuY2VSZWYgPSB1c2VSZWY8UG9wdWxhdGlvbkQzQ2hhcnQgfCBudWxsPihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghY2hhcnRFbGVtUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBpZiAoIWNoYXJ0SW5zdGFuY2VSZWYuY3VycmVudCkge1xuICAgICAgY2hhcnRJbnN0YW5jZVJlZi5jdXJyZW50ID0gbmV3IFBvcHVsYXRpb25EM0NoYXJ0KFxuICAgICAgICBjaGFydEVsZW1SZWYuY3VycmVudCwgXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBtYXJnaW5zOiB7XG4gICAgICAgICAgICB0b3A6IDEwMCwgXG4gICAgICAgICAgICByaWdodDogMCwgXG4gICAgICAgICAgICBib3R0b206IDE1MCwgXG4gICAgICAgICAgICBsZWZ0OiAxMDBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgY2hhcnRJbnN0YW5jZVJlZi5jdXJyZW50LnVwZGF0ZURhdGEoZGF0YSk7XG4gICAgfVxuICB9LCBbZGF0YV0pO1xuXG4gIHJldHVybiAoXG4gICAgPENoYXJ0V3JhcHBlciByZWY9e2NoYXJ0RWxlbVJlZn0gY2xhc3NOYW1lcz17W1wicG9wdWxhdGlvbi1jaGFydFwiXX0gLz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHVsYXRpb25DaGFydDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICcuL2J1dHRvbi5zY3NzJztcbmNvbnN0IEJ1dHRvbjpSZWFjdC5GQzxSZWFjdC5CdXR0b25IVE1MQXR0cmlidXRlczxIVE1MQnV0dG9uRWxlbWVudD4+ID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgLi4uYnRuUHJvcHMgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxidXR0b24gY2xhc3NOYW1lPXtgYnV0dG9uICR7Y2xhc3NOYW1lfWB9IHsuLi5idG5Qcm9wc30+eyBjaGlsZHJlbiB9PC9idXR0b24+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCdXR0b247IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUXVlcnkgfSBmcm9tICdAYXBvbGxvL3JlYWN0LWhvb2tzJztcblxuaW1wb3J0IHsgR0VUX0NPVU5UUklFU19QT1BVTEFUSU9OIH0gZnJvbSAnQHF1ZXJpZXMnO1xuaW1wb3J0IFBvcHVsYXRpb25DaGFydCBmcm9tICdAL0NoYXJ0cy9Qb3B1bGF0aW9uQ2hhcnQnO1xuaW1wb3J0IHsgSUNvdW50cnlQb3B1bGF0aW9uIH0gZnJvbSAnQHR5cGVzJztcblxuaW1wb3J0ICcuL3BvcHVsYXRpb24tcGFnZS5zY3NzJztcbmltcG9ydCBUaXRsZSBmcm9tICdAL1VJL1RpdGxlJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQC9VSS9CdXR0b24nO1xuaW1wb3J0IFByZWxvYWQgZnJvbSAnQC9VSS9QcmVsb2FkJztcblxuaW50ZXJmYWNlIElQb3B1bGF0aW9uRGF0YSB7XG4gIENvdW50cnk6IElDb3VudHJ5UG9wdWxhdGlvbltdXG59XG5cbnR5cGUgb3JkZXJCeSA9ICdwb3B1bGF0aW9uX2Rlc2MnIHwgJ3BvcHVsYXRpb25fYXNjJztcblxuaW50ZXJmYWNlIElQb3B1bGF0aW9uVmFycyB7XG4gIG9yZGVyQnk6IG9yZGVyQnlcbn1cblxuY29uc3QgUG9wdWxhdGlvblBhZ2U6UmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFsgb3JkZXJCeSwgc2V0T3JkZXJCeSBdID0gdXNlU3RhdGU8b3JkZXJCeT4oJ3BvcHVsYXRpb25fZGVzYycpO1xuICBjb25zdCB7IGRhdGEsIGxvYWRpbmcgfSA9IHVzZVF1ZXJ5PElQb3B1bGF0aW9uRGF0YSwgSVBvcHVsYXRpb25WYXJzPihHRVRfQ09VTlRSSUVTX1BPUFVMQVRJT04sIHtcbiAgICB2YXJpYWJsZXM6IHsgb3JkZXJCeSB9XG4gIH0pO1xuXG4gIGNvbnN0IGhhbmRsZU9yZGVyaW5nID0gKGU6IFJlYWN0LlN5bnRoZXRpY0V2ZW50KTp2b2lkID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgc2V0T3JkZXJCeShvcmRlckJ5ID0+IG9yZGVyQnkgPT09ICdwb3B1bGF0aW9uX2Rlc2MnID8gJ3BvcHVsYXRpb25fYXNjJyA6ICdwb3B1bGF0aW9uX2Rlc2MnKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJwb3B1bGF0aW9uLXBhZ2VcIj5cbiAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPVwicG9wdWxhdGlvbi1wYWdlLS1oZWFkZXJcIj5cbiAgICAgICAgPFRpdGxlPlxuICAgICAgICAgIFRvcCB0ZW4gY291bnRyaWVzIHdpdGggdGhlIHsgb3JkZXJCeSA9PT0gJ3BvcHVsYXRpb25fZGVzYycgPyAnbGFyZ2VzdCcgOiAnc21hbGxlc3QnIH0gcG9wdWxhdGlvblxuICAgICAgICA8L1RpdGxlPlxuICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cInBvcHVsYXRpb24tcGFnZS0tYnRuXCIgb25DbGljaz17aGFuZGxlT3JkZXJpbmd9PlxuICAgICAgICAgIFNob3cgPHN0cm9uZz57IG9yZGVyQnkgPT09ICdwb3B1bGF0aW9uX2Rlc2MnID8gJ3NtYWxsZXN0JyA6ICdsYXJnZXN0JyB9PC9zdHJvbmc+XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9oZWFkZXI+XG4gICAgICB7IChsb2FkaW5nICYmICFkYXRhKSAmJiA8UHJlbG9hZCAvPiB9XG4gICAgICB7IGRhdGEgJiYgPFBvcHVsYXRpb25DaGFydCBkYXRhPXtkYXRhLkNvdW50cnl9IC8+IH1cbiAgICA8L3NlY3Rpb24+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb3B1bGF0aW9uUGFnZTsiXSwic291cmNlUm9vdCI6IiJ9