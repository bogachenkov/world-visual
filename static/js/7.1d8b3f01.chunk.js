(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{372:function(t,n,e){"use strict";var r=e(1),o=e.n(r);e(373);n.a=function(t){var n=t.children;return o.a.createElement("h2",{className:"title"},n)}},373:function(t,n,e){},375:function(t,n,e){"use strict";e.d(n,"e",(function(){return h})),e.d(n,"d",(function(){return y})),e.d(n,"b",(function(){return m})),e.d(n,"f",(function(){return g})),e.d(n,"c",(function(){return b})),e.d(n,"a",(function(){return v}));var r=e(103);function o(){var t=p(['\n  query getRegions {\n    Region(filter: { name_not: "Polar" }) {\n      _id,\n      name,\n      subregions {\n        _id\n        name\n        countries(filter: { population_gt: 1 }) {\n          _id,\n          population\n        }\n      }\n    }\n  }\n']);return o=function(){return t},t}function a(){var t=p(['\n  query getCountryBorders {\n    Country(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n      ...CountryData,\n      alpha3Code,\n      borders {\n        alpha3Code\n      }\n    }\n  }\n  ',"\n"]);return a=function(){return t},t}function i(){var t=p(['\n  query getTimezones {\n    Timezone {\n      _id,\n      name,\n      countries(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n        _id,\n        population\n      }\n    }\n  }\n']);return i=function(){return t},t}function u(){var t=p(['\n  query getCountriesArea {\n    Country(filter: { area_lt: 1500000, population_gt: 1, capital_not: "" }) {\n      ...CountryData,\n      area\n    }\n  }\n  ',"\n"]);return u=function(){return t},t}function c(){var t=p(['\n  query getCountriesDensity {\n      Country(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n      ...CountryData\n      alpha3Code,\n      density: populationDensity,\n      population,\n      area\n    }\n  }\n  ',"\n"]);return c=function(){return t},t}function s(){var t=p(["\n  query getCountriesByPopulation($orderBy:[_CountryOrdering]) {\n    Country(orderBy: $orderBy, first: 10, filter: { population_gte: 1 }) {\n      ...CountryData\n      population,\n      populationDensity\n    }\n  }\n  ","\n"]);return s=function(){return t},t}function l(){var t=p(["\n  query getCountryByName($name: String) {\n    Country(name: $name) {\n      area,\n      demonym,\n      name,\n      nativeName,\n      numericCode,\n      capital,\n      officialLanguages {\n        name\n      }\n      population,\n      populationDensity,\n      subregion {\n        name\n      },\n      borders {\n        name\n      }\n      timezones {\n        name\n      }\n    }\n  }\n"]);return l=function(){return t},t}function f(){var t=p(["\n  fragment CountryData on Country {\n    _id,\n    name\n  }\n"]);return f=function(){return t},t}function p(t,n){return n||(n=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(n)}}))}var d=Object(r.b)(f()),h=(Object(r.b)(l()),Object(r.b)(s(),d)),y=Object(r.b)(c(),d),m=Object(r.b)(u(),d),g=Object(r.b)(i()),b=Object(r.b)(a(),d),v=Object(r.b)(o())},376:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(374);function o(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var i=function(){function t(n,e,o){var i=e.margins,u=e.height,c=e.width;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"svg",void 0),a(this,"margins",void 0),a(this,"width",void 0),a(this,"height",void 0),a(this,"xAxisGroup",void 0),a(this,"yAxisGroup",void 0),this.margins=i;var s=c||n.clientWidth,l=u||n.clientHeight,f=Math.max(s,1100),p=Math.max(l,o?1100:700);this.width=f-this.margins.left-this.margins.right,this.height=p-this.margins.top-this.margins.bottom,this.svg=r.r(n).append("svg").attr("viewBox","0 0 ".concat(f," ").concat(p)).attr("preserveAspectRatio","xMinYMin meet").append("g"),this.centerChart()}var n,e,i;return n=t,(e=[{key:"addAxisGroups",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t&&(this.xAxisGroup=this.svg.append("g").classed("axis-group",!0).classed("x-axis-group",!0).attr("transform","translate(0, ".concat(this.height,")"))),n&&(this.yAxisGroup=this.svg.append("g").classed("axis-group",!0).classed("y-axis-group",!0))}},{key:"centerChart",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.margins.left,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.margins.top;this.svg.attr("transform","translate(".concat(t,", ").concat(n,")"))}},{key:"wrap",value:function(t,n){t.each((function(){for(var t,e=r.r(this),o=e.text().split(/\s+/).reverse(),a=[],i=0,u=e.attr("y"),c=parseFloat(e.attr("dy")),s=e.text(null).append("tspan").attr("x",0).attr("y",u).attr("dy",c+"em");t=o.pop();)a.push(t),s.text(a.join(" ")),s.node().getComputedTextLength()>n&&(a.pop(),s.text(a.join(" ")),a=[t],s=e.append("tspan").attr("x",0).attr("y",u).attr("dy","".concat(1.1*++i+c,"em")).text(t))}))}},{key:"degToRad",value:function(t){return t*Math.PI/180}},{key:"radToDeg",value:function(t){return 180*t/Math.PI}}])&&o(n.prototype,e),i&&o(n,i),t}()},377:function(t,n,e){"use strict";var r=e(1),o=e.n(r),a=(e(378),Object(r.forwardRef)((function(t,n){var e=t.children,r=t.classNames,a=void 0===r?[]:r;return o.a.createElement("div",{ref:n,className:"chart-wrapper ".concat(a.join(" "))},e)})));n.a=a},378:function(t,n,e){},484:function(t,n,e){},489:function(t,n,e){"use strict";e.r(n);var r=e(1),o=e.n(r),a=e(370),i=e(372),u=e(375),c=e(374);function s(t){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,n){return(f=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function p(t){var n=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var e,r=y(t);if(n){var o=y(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return d(this,e)}}function d(t,n){return!n||"object"!==s(n)&&"function"!==typeof n?h(t):n}function h(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function y(t){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var m=function(t){!function(t,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&f(t,n)}(a,t);var n,e,r,o=p(a);function a(t,n,e){var r,i,u,c;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,a),(r=o.call(this,t,e)).data=n,i=h(r),c=["#02c4de","#02b3ca","#02a1b6","#028ea1","#038198","#04738f","#045676","#044862","#03394e","#033447"],(u="colors")in i?Object.defineProperty(i,u,{value:c,enumerable:!0,configurable:!0,writable:!0}):i[u]=c,r.addAxisGroups(),r.update(),r}return n=a,(e=[{key:"formatNumbers",value:function(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g," ")}},{key:"update",value:function(){var t=this,n=c.o().domain([0,c.j(this.data,(function(t){return t.totalCountries}))]).range([0,this.width]),e=c.o().domain([0,c.j(this.data,(function(t){return t.totalPopulation}))]).range([this.height,0]),r=c.o().domain([c.k(this.data,(function(t){return t.totalPopulation+t.totalCountries})),c.j(this.data,(function(t){return t.totalPopulation+t.totalCountries}))]).range([10,30]),o=c.p().domain(this.data.map((function(t){return t.name}))).range(this.colors),a=c.b(n).ticks(4).tickSize(-this.height).tickPadding(15),i=c.c(e).tickSize(-this.width).tickPadding(10);this.xAxisGroup.call(a),this.yAxisGroup.call(i);var u=this.svg.append("g").selectAll(".bubbles").data(this.data).join("g").classed("bubbles",!0);u.append("circle").attr("cx",n(0)).attr("cy",e(0)).attr("r",(function(t){return.2*r(t.totalPopulation+t.totalCountries)})).attr("fill",(function(t){return o(t.name)})).attr("stroke",(function(t){return o(t.name)})).transition().duration(700).attr("cx",(function(t){return n(t.totalCountries)})).attr("cy",(function(t){return e(t.totalPopulation)})),u.append("circle").attr("cx",n(0)).attr("cy",e(0)).attr("r",(function(t){return r(t.totalPopulation+t.totalCountries)})).attr("fill","transparent").attr("stroke",(function(t){return o(t.name)})).attr("stroke-width",1.5).transition().duration(700).attr("cx",(function(t){return n(t.totalCountries)})).attr("cy",(function(t){return e(t.totalPopulation)})),u.append("circle").attr("cx",n(0)).attr("cy",e(0)).attr("r",(function(t){return r(t.totalPopulation+t.totalCountries)})).attr("fill",(function(t){return o(t.name)})).attr("opacity",.7).on("mouseover",(function(t){c.r(this).attr("opacity",.6)})).on("mouseout",(function(t){c.r(this).attr("opacity",.7)})).transition().duration(700).attr("cx",(function(t){return n(t.totalCountries)})).attr("cy",(function(t){return e(t.totalPopulation)})),u.append("title").text((function(n){return"".concat(n.name,". Population: ").concat(t.formatNumbers(n.totalPopulation),". Countries: ").concat(n.totalCountries)}))}}])&&l(n.prototype,e),r&&l(n,r),a}(e(376).a),g=(e(484),e(377)),b=function(t){var n=t.data,e=Object(r.useRef)(null),a=Object(r.useRef)(null);return Object(r.useEffect)((function(){if(e.current){var t=n.map((function(t){var n=t.countries.length,e=t.countries.reduce((function(t,n){return t+n.population}),0);return{name:t.name,totalCountries:n,totalPopulation:e}}));a.current=new m(e.current,t,{margins:{top:50,right:30,bottom:80,left:100}})}}),[n]),o.a.createElement(g.a,{classNames:["timezones-chart"],ref:e})},v=e(102);n.default=function(){var t=Object(a.a)(u.f),n=t.data,e=t.loading;return o.a.createElement("section",null,o.a.createElement(i.a,null,"Number of countries and total population in each timezone"),e&&!n&&o.a.createElement(v.a,null),n&&o.a.createElement(b,{data:n.Timezone}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9VSS9UaXRsZS9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2dxbC9xdWVyaWVzLnRzIiwid2VicGFjazovLy8uL3NyYy9kMy1jaGFydC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DaGFydFdyYXBwZXIvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NoYXJ0cy9UaW1lem9uZXNDaGFydC9UaW1lem9uZXNEM0NoYXJ0LnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NoYXJ0cy9UaW1lem9uZXNDaGFydC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL1RpbWV6b25lc1BhZ2UvaW5kZXgudHN4Il0sIm5hbWVzIjpbIlRpdGxlIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJjb3VudHJ5RnJhZ21lbnQiLCJncWwiLCJHRVRfQ09VTlRSSUVTX1BPUFVMQVRJT04iLCJHRVRfQ09VTlRSSUVTX0RFTlNJVFkiLCJHRVRfQ09VTlRSSUVTX0FSRUEiLCJHRVRfVElNRVpPTkVTIiwiR0VUX0NPVU5UUklFU19CT1JERVJTIiwiR0VUX0NPTlRJTkVOVFMiLCJEM0NoYXJ0IiwiZWxlbWVudCIsInZlcnRpY2FsU2NyZWVuIiwibWFyZ2lucyIsImhlaWdodCIsIndpZHRoIiwidGhpcyIsInN2Z1dpZHRoIiwiY2xpZW50V2lkdGgiLCJzdmdIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJ2aWV3Qm94V2lkdGgiLCJNYXRoIiwibWF4Iiwidmlld0JveEhlaWdodCIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsInN2ZyIsImQzIiwiYXBwZW5kIiwiYXR0ciIsImNlbnRlckNoYXJ0IiwieCIsInkiLCJ4QXhpc0dyb3VwIiwiY2xhc3NlZCIsInlBeGlzR3JvdXAiLCJ0ZXh0IiwiZWFjaCIsIndvcmQiLCJ3b3JkcyIsInNwbGl0IiwicmV2ZXJzZSIsImxpbmUiLCJsaW5lTnVtYmVyIiwiZHkiLCJwYXJzZUZsb2F0IiwidHNwYW4iLCJwb3AiLCJwdXNoIiwiam9pbiIsIm5vZGUiLCJnZXRDb21wdXRlZFRleHRMZW5ndGgiLCJkZWciLCJQSSIsInJhZCIsIkNoYXJ0V3JhcHBlciIsImZvcndhcmRSZWYiLCJyZWYiLCJjbGFzc05hbWVzIiwiVGltZXpvbmVzRDNDaGFydCIsImRhdGEiLCJkaW1lbnNpb25zIiwiYWRkQXhpc0dyb3VwcyIsInVwZGF0ZSIsIm4iLCJ0b1N0cmluZyIsInJlcGxhY2UiLCJkb21haW4iLCJkIiwidG90YWxDb3VudHJpZXMiLCJyYW5nZSIsInRvdGFsUG9wdWxhdGlvbiIsInoiLCJjb2xvciIsIm1hcCIsIm5hbWUiLCJjb2xvcnMiLCJ4QXhpc0NhbGwiLCJ0aWNrcyIsInRpY2tTaXplIiwidGlja1BhZGRpbmciLCJ5QXhpc0NhbGwiLCJjYWxsIiwiYnViYmxlcyIsInNlbGVjdEFsbCIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsIm9uIiwiZm9ybWF0TnVtYmVycyIsIlRpbWV6b25lc0NoYXJ0IiwiY2hhcnRFbGVtZW50UmVmIiwidXNlUmVmIiwiY2hhcnRJbnN0YW5jZVJlZiIsInVzZUVmZmVjdCIsImN1cnJlbnQiLCJmb3JtYXR0ZWREYXRhIiwiY291bnRyaWVzIiwibGVuZ3RoIiwicmVkdWNlIiwidG90YWwiLCJwb3B1bGF0aW9uIiwiVGltZXpvbmVzUGFnZSIsInVzZVF1ZXJ5IiwibG9hZGluZyIsIlByZWxvYWQiLCJUaW1lem9uZSJdLCJtYXBwaW5ncyI6IjBGQUFBLDJCQVdlQSxJQVJRLFNBQUMsR0FBaUIsSUFBZkMsRUFBZSxFQUFmQSxTQUN4QixPQUNFLHdCQUFJQyxVQUFVLFNBQ1ZELEssaWtGQ0pSLElBQU1FLEVBQWtCQyxZQUFILEtBa0NSQyxHQTNCc0JELFlBQUgsS0EyQlFBLFlBQUgsSUFRakNELElBR1NHLEVBQXdCRixZQUFILElBVTlCRCxHQUdTSSxFQUFxQkgsWUFBSCxJQU8zQkQsR0FHU0ssRUFBZ0JK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QUMzRyxFQUFBLEVBQUQsa0VBQ0cyRyxJQUFZM0MsR0FBUyxrQkFBQzRDLEVBQUEsRUFBRCxNQUN0QjVDLEdBQVEsa0JBQUMsRUFBRCxDQUFnQkEsS0FBTUEsRUFBSzZDIiwiZmlsZSI6InN0YXRpYy9qcy83LjFkOGIzZjAxLmNodW5rLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi90aXRsZS5zY3NzJztcblxuY29uc3QgVGl0bGU6UmVhY3QuRkMgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGgyIGNsYXNzTmFtZT1cInRpdGxlXCI+XG4gICAgICB7IGNoaWxkcmVuIH1cbiAgICA8L2gyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGl0bGU7IiwiaW1wb3J0IHsgZ3FsIH0gZnJvbSAnYXBvbGxvLWJvb3N0JztcblxuY29uc3QgY291bnRyeUZyYWdtZW50ID0gZ3FsYFxuICBmcmFnbWVudCBDb3VudHJ5RGF0YSBvbiBDb3VudHJ5IHtcbiAgICBfaWQsXG4gICAgbmFtZVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgR0VUX0NPVU5UUllfQllfTkFNRSA9IGdxbGBcbiAgcXVlcnkgZ2V0Q291bnRyeUJ5TmFtZSgkbmFtZTogU3RyaW5nKSB7XG4gICAgQ291bnRyeShuYW1lOiAkbmFtZSkge1xuICAgICAgYXJlYSxcbiAgICAgIGRlbW9ueW0sXG4gICAgICBuYW1lLFxuICAgICAgbmF0aXZlTmFtZSxcbiAgICAgIG51bWVyaWNDb2RlLFxuICAgICAgY2FwaXRhbCxcbiAgICAgIG9mZmljaWFsTGFuZ3VhZ2VzIHtcbiAgICAgICAgbmFtZVxuICAgICAgfVxuICAgICAgcG9wdWxhdGlvbixcbiAgICAgIHBvcHVsYXRpb25EZW5zaXR5LFxuICAgICAgc3VicmVnaW9uIHtcbiAgICAgICAgbmFtZVxuICAgICAgfSxcbiAgICAgIGJvcmRlcnMge1xuICAgICAgICBuYW1lXG4gICAgICB9XG4gICAgICB0aW1lem9uZXMge1xuICAgICAgICBuYW1lXG4gICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgR0VUX0NPVU5UUklFU19QT1BVTEFUSU9OID0gZ3FsYFxuICBxdWVyeSBnZXRDb3VudHJpZXNCeVBvcHVsYXRpb24oJG9yZGVyQnk6W19Db3VudHJ5T3JkZXJpbmddKSB7XG4gICAgQ291bnRyeShvcmRlckJ5OiAkb3JkZXJCeSwgZmlyc3Q6IDEwLCBmaWx0ZXI6IHsgcG9wdWxhdGlvbl9ndGU6IDEgfSkge1xuICAgICAgLi4uQ291bnRyeURhdGFcbiAgICAgIHBvcHVsYXRpb24sXG4gICAgICBwb3B1bGF0aW9uRGVuc2l0eVxuICAgIH1cbiAgfVxuICAke2NvdW50cnlGcmFnbWVudH1cbmA7XG5cbmV4cG9ydCBjb25zdCBHRVRfQ09VTlRSSUVTX0RFTlNJVFkgPSBncWxgXG4gIHF1ZXJ5IGdldENvdW50cmllc0RlbnNpdHkge1xuICAgICAgQ291bnRyeShmaWx0ZXI6IHsgYXJlYV9ndDogMSwgcG9wdWxhdGlvbl9ndDogMSwgY2FwaXRhbF9ub3Q6IFwiXCIgfSkge1xuICAgICAgLi4uQ291bnRyeURhdGFcbiAgICAgIGFscGhhM0NvZGUsXG4gICAgICBkZW5zaXR5OiBwb3B1bGF0aW9uRGVuc2l0eSxcbiAgICAgIHBvcHVsYXRpb24sXG4gICAgICBhcmVhXG4gICAgfVxuICB9XG4gICR7Y291bnRyeUZyYWdtZW50fVxuYDtcblxuZXhwb3J0IGNvbnN0IEdFVF9DT1VOVFJJRVNfQVJFQSA9IGdxbGBcbiAgcXVlcnkgZ2V0Q291bnRyaWVzQXJlYSB7XG4gICAgQ291bnRyeShmaWx0ZXI6IHsgYXJlYV9sdDogMTUwMDAwMCwgcG9wdWxhdGlvbl9ndDogMSwgY2FwaXRhbF9ub3Q6IFwiXCIgfSkge1xuICAgICAgLi4uQ291bnRyeURhdGEsXG4gICAgICBhcmVhXG4gICAgfVxuICB9XG4gICR7Y291bnRyeUZyYWdtZW50fVxuYDtcblxuZXhwb3J0IGNvbnN0IEdFVF9USU1FWk9ORVMgPSBncWxgXG4gIHF1ZXJ5IGdldFRpbWV6b25lcyB7XG4gICAgVGltZXpvbmUge1xuICAgICAgX2lkLFxuICAgICAgbmFtZSxcbiAgICAgIGNvdW50cmllcyhmaWx0ZXI6IHsgYXJlYV9ndDogMSwgcG9wdWxhdGlvbl9ndDogMSwgY2FwaXRhbF9ub3Q6IFwiXCIgfSkge1xuICAgICAgICBfaWQsXG4gICAgICAgIHBvcHVsYXRpb25cbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBHRVRfQ09VTlRSSUVTX0JPUkRFUlMgPSBncWxgXG4gIHF1ZXJ5IGdldENvdW50cnlCb3JkZXJzIHtcbiAgICBDb3VudHJ5KGZpbHRlcjogeyBhcmVhX2d0OiAxLCBwb3B1bGF0aW9uX2d0OiAxLCBjYXBpdGFsX25vdDogXCJcIiB9KSB7XG4gICAgICAuLi5Db3VudHJ5RGF0YSxcbiAgICAgIGFscGhhM0NvZGUsXG4gICAgICBib3JkZXJzIHtcbiAgICAgICAgYWxwaGEzQ29kZVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAke2NvdW50cnlGcmFnbWVudH1cbmA7XG5cbmV4cG9ydCBjb25zdCBHRVRfQ09OVElORU5UUyA9IGdxbGBcbiAgcXVlcnkgZ2V0UmVnaW9ucyB7XG4gICAgUmVnaW9uKGZpbHRlcjogeyBuYW1lX25vdDogXCJQb2xhclwiIH0pIHtcbiAgICAgIF9pZCxcbiAgICAgIG5hbWUsXG4gICAgICBzdWJyZWdpb25zIHtcbiAgICAgICAgX2lkXG4gICAgICAgIG5hbWVcbiAgICAgICAgY291bnRyaWVzKGZpbHRlcjogeyBwb3B1bGF0aW9uX2d0OiAxIH0pIHtcbiAgICAgICAgICBfaWQsXG4gICAgICAgICAgcG9wdWxhdGlvblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5gOyIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcblxuZXhwb3J0IGludGVyZmFjZSBJTWFyZ2lucyB7XG4gIHRvcDogbnVtYmVyO1xuICByaWdodDogbnVtYmVyO1xuICBib3R0b206IG51bWJlcjtcbiAgbGVmdDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDaGFydERpbWVuc2lvbnMge1xuICBtYXJnaW5zOiBJTWFyZ2lucztcbiAgd2lkdGg/OiBudW1iZXI7XG4gIGhlaWdodD86IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgRDNTZWxlY3Rpb24gPSBkMy5TZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGFueSwgYW55LCBhbnk+OyBcblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgRDNDaGFydCB7XG4gIHByb3RlY3RlZCBzdmc6IEQzU2VsZWN0aW9uO1xuICBwcm90ZWN0ZWQgbWFyZ2luczpJTWFyZ2lucztcbiAgcHJvdGVjdGVkIHdpZHRoOm51bWJlcjtcbiAgcHJvdGVjdGVkIGhlaWdodDpudW1iZXI7XG4gIHByb3RlY3RlZCB4QXhpc0dyb3VwITogRDNTZWxlY3Rpb247XG4gIHByb3RlY3RlZCB5QXhpc0dyb3VwITogRDNTZWxlY3Rpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZWxlbWVudDogSFRNTERpdkVsZW1lbnQsXG4gICAgeyBtYXJnaW5zLCBoZWlnaHQsIHdpZHRoIH06IElDaGFydERpbWVuc2lvbnMsXG4gICAgdmVydGljYWxTY3JlZW4/OiBib29sZWFuXG4gICkge1xuICAgIHRoaXMubWFyZ2lucyA9IG1hcmdpbnM7XG5cbiAgICBjb25zdCBzdmdXaWR0aCA9ICh3aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoKTtcbiAgICBjb25zdCBzdmdIZWlnaHQgPSAoaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0KTtcblxuICAgIGNvbnN0IHZpZXdCb3hXaWR0aCA9IE1hdGgubWF4KHN2Z1dpZHRoLCAxMTAwKTtcbiAgICBjb25zdCB2aWV3Qm94SGVpZ2h0ID0gTWF0aC5tYXgoc3ZnSGVpZ2h0LCB2ZXJ0aWNhbFNjcmVlbiA/IDExMDAgOiA3MDApO1xuXG4gICAgdGhpcy53aWR0aCA9IHZpZXdCb3hXaWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0IC0gdGhpcy5tYXJnaW5zLnJpZ2h0O1xuICAgIHRoaXMuaGVpZ2h0ID0gdmlld0JveEhlaWdodCAtIHRoaXMubWFyZ2lucy50b3AgLSB0aGlzLm1hcmdpbnMuYm90dG9tO1xuXG4gICAgdGhpcy5zdmcgPSBcbiAgICAgIGQzLnNlbGVjdChlbGVtZW50KVxuICAgICAgICAuYXBwZW5kKCdzdmcnKVxuICAgICAgICAgIC5hdHRyKCd2aWV3Qm94JywgYDAgMCAke3ZpZXdCb3hXaWR0aH0gJHt2aWV3Qm94SGVpZ2h0fWApXG4gICAgICAgICAgLmF0dHIoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwieE1pbllNaW4gbWVldFwiKVxuICAgICAgICAuYXBwZW5kKCdnJyk7XG4gICAgdGhpcy5jZW50ZXJDaGFydCgpO1xuICB9XG4gIFxuICBwcm90ZWN0ZWQgYWRkQXhpc0dyb3Vwcyh4OiBib29sZWFuID0gdHJ1ZSwgeTogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICBpZiAoeCkge1xuICAgICAgdGhpcy54QXhpc0dyb3VwID0gdGhpcy5zdmcuYXBwZW5kKCdnJylcbiAgICAgICAgLmNsYXNzZWQoJ2F4aXMtZ3JvdXAnLCB0cnVlKVxuICAgICAgICAuY2xhc3NlZCgneC1heGlzLWdyb3VwJywgdHJ1ZSlcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoMCwgJHt0aGlzLmhlaWdodH0pYCk7XG4gICAgfVxuICAgIGlmICh5KSB7XG4gICAgICB0aGlzLnlBeGlzR3JvdXAgPSB0aGlzLnN2Zy5hcHBlbmQoJ2cnKVxuICAgICAgICAuY2xhc3NlZCgnYXhpcy1ncm91cCcsIHRydWUpXG4gICAgICAgIC5jbGFzc2VkKCd5LWF4aXMtZ3JvdXAnLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgY2VudGVyQ2hhcnQobGVmdDogbnVtYmVyID0gdGhpcy5tYXJnaW5zLmxlZnQsIHRvcDogbnVtYmVyID0gdGhpcy5tYXJnaW5zLnRvcCk6dm9pZCB7XG4gICAgdGhpcy5zdmcuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke2xlZnR9LCAke3RvcH0pYClcbiAgfVxuXG4gIHByb3RlY3RlZCB3cmFwKHRleHQ6IGQzLlNlbGVjdGlvbjxkMy5CYXNlVHlwZSwgdW5rbm93biwgU1ZHR0VsZW1lbnQsIGFueT4sIHdpZHRoOiBudW1iZXIpIHtcbiAgICB0ZXh0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGV4dCA9IGQzLnNlbGVjdCh0aGlzKSxcbiAgICAgICAgICB3b3JkcyA9IHRleHQudGV4dCgpLnNwbGl0KC9cXHMrLykucmV2ZXJzZSgpLFxuICAgICAgICAgIHdvcmQsXG4gICAgICAgICAgbGluZTogc3RyaW5nW10gPSBbXSxcbiAgICAgICAgICBsaW5lTnVtYmVyID0gMCxcbiAgICAgICAgICBsaW5lSGVpZ2h0ID0gMS4xLCAvLyBlbXNcbiAgICAgICAgICB5ID0gdGV4dC5hdHRyKFwieVwiKSxcbiAgICAgICAgICBkeSA9IHBhcnNlRmxvYXQodGV4dC5hdHRyKFwiZHlcIikpLFxuICAgICAgICAgIHRzcGFuID0gdGV4dC50ZXh0KG51bGwpLmFwcGVuZChcInRzcGFuXCIpLmF0dHIoXCJ4XCIsIDApLmF0dHIoXCJ5XCIsIHkpLmF0dHIoXCJkeVwiLCBkeSArIFwiZW1cIilcbiAgICAgIHdoaWxlICh3b3JkID0gd29yZHMucG9wKCkpIHtcbiAgICAgICAgbGluZS5wdXNoKHdvcmQpXG4gICAgICAgIHRzcGFuLnRleHQobGluZS5qb2luKFwiIFwiKSlcbiAgICAgICAgaWYgKHRzcGFuLm5vZGUoKSEuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCkgPiB3aWR0aCkge1xuICAgICAgICAgIGxpbmUucG9wKClcbiAgICAgICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbihcIiBcIikpXG4gICAgICAgICAgbGluZSA9IFt3b3JkXVxuICAgICAgICAgIHRzcGFuID0gdGV4dC5hcHBlbmQoXCJ0c3BhblwiKS5hdHRyKFwieFwiLCAwKS5hdHRyKFwieVwiLCB5KS5hdHRyKFwiZHlcIiwgYCR7KytsaW5lTnVtYmVyICogbGluZUhlaWdodCArIGR5fWVtYCkudGV4dCh3b3JkKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHByb3RlY3RlZCBkZWdUb1JhZChkZWc6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIGRlZyAqIE1hdGguUEkgLyAxODA7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmFkVG9EZWcocmFkOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiByYWQgKiAxODAgLyBNYXRoLlBJO1xuICB9XG59IiwiaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJy4vY2hhcnQtd3JhcHBlci5zY3NzJztcblxuaW50ZXJmYWNlIElDaGFydFdyYXBwZXJQcm9wcyB7XG4gIGNsYXNzTmFtZXM/OiBzdHJpbmdbXTtcbn1cblxuY29uc3QgQ2hhcnRXcmFwcGVyID0gZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgSUNoYXJ0V3JhcHBlclByb3BzPigoeyBjaGlsZHJlbiwgY2xhc3NOYW1lcyA9IFtdIH0sIHJlZikgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXtyZWZ9IGNsYXNzTmFtZT17YGNoYXJ0LXdyYXBwZXIgJHtjbGFzc05hbWVzLmpvaW4oJyAnKX1gfT5cbiAgICAgIHsgY2hpbGRyZW4gfVxuICAgIDwvZGl2PlxuICApO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENoYXJ0V3JhcHBlcjsiLCJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgRDNDaGFydCwgeyBJQ2hhcnREaW1lbnNpb25zIH0gZnJvbSAnQGQzLWNoYXJ0JztcbmltcG9ydCB7IElGb3JtYXRUaW1lem9uZSB9IGZyb20gJ0B0eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWV6b25lc0QzQ2hhcnQgZXh0ZW5kcyBEM0NoYXJ0IHtcbiAgcHJpdmF0ZSBjb2xvcnMgPSBbXG4gICAgJyMwMmM0ZGUnLCAnIzAyYjNjYScsICcjMDJhMWI2JywgJyMwMjhlYTEnLCAnIzAzODE5OCcsXG4gICAgJyMwNDczOGYnLCAnIzA0NTY3NicsICcjMDQ0ODYyJywgJyMwMzM5NGUnLCAnIzAzMzQ0NydcbiAgXVxuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRGl2RWxlbWVudCwgcHJpdmF0ZSBkYXRhOiBJRm9ybWF0VGltZXpvbmVbXSwgZGltZW5zaW9uczogSUNoYXJ0RGltZW5zaW9ucykge1xuICAgIHN1cGVyKGVsZW1lbnQsIGRpbWVuc2lvbnMpO1xuICAgIHRoaXMuYWRkQXhpc0dyb3VwcygpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdE51bWJlcnMobjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbi50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIFwiIFwiKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlKCkge1xuICAgIGNvbnN0IF8gPSB0aGlzO1xuXG4gICAgY29uc3QgeCA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5kb21haW4oWzAsIGQzLm1heCh0aGlzLmRhdGEsIGQgPT4gZC50b3RhbENvdW50cmllcykhXSlcbiAgICAgIC5yYW5nZShbMCwgdGhpcy53aWR0aF0pO1xuICAgIGNvbnN0IHkgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAuZG9tYWluKFswLCBkMy5tYXgodGhpcy5kYXRhLCBkID0+IGQudG90YWxQb3B1bGF0aW9uKSFdKVxuICAgICAgLnJhbmdlKFsgdGhpcy5oZWlnaHQsIDAgXSk7XG4gICAgY29uc3QgeiA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5kb21haW4oWyBkMy5taW4odGhpcy5kYXRhLCBkID0+IGQudG90YWxQb3B1bGF0aW9uICArIGQudG90YWxDb3VudHJpZXMpISwgZDMubWF4KHRoaXMuZGF0YSwgZCA9PiBkLnRvdGFsUG9wdWxhdGlvbiArIGQudG90YWxDb3VudHJpZXMpISBdKVxuICAgICAgLnJhbmdlKFsxMCwgMzBdKVxuICAgIGNvbnN0IGNvbG9yID0gZDMuc2NhbGVPcmRpbmFsPHN0cmluZz4oKVxuICAgICAgLmRvbWFpbih0aGlzLmRhdGEubWFwKGQgPT4gZC5uYW1lKSlcbiAgICAgIC5yYW5nZSh0aGlzLmNvbG9ycyk7XG5cbiAgICBjb25zdCB4QXhpc0NhbGwgPSBkMy5heGlzQm90dG9tKHgpXG4gICAgICAudGlja3MoNClcbiAgICAgIC50aWNrU2l6ZSgtdGhpcy5oZWlnaHQpXG4gICAgICAudGlja1BhZGRpbmcoMTUpO1xuICAgIGNvbnN0IHlBeGlzQ2FsbCA9IGQzLmF4aXNMZWZ0KHkpXG4gICAgICAudGlja1NpemUoLXRoaXMud2lkdGgpXG4gICAgICAudGlja1BhZGRpbmcoMTApO1xuXG4gICAgdGhpcy54QXhpc0dyb3VwLmNhbGwoeEF4aXNDYWxsKTtcbiAgICB0aGlzLnlBeGlzR3JvdXAuY2FsbCh5QXhpc0NhbGwpO1xuXG4gICAgY29uc3QgYnViYmxlcyA9IHRoaXMuc3ZnLmFwcGVuZCgnZycpXG4gICAgICAuc2VsZWN0QWxsKCcuYnViYmxlcycpXG4gICAgICAuZGF0YSh0aGlzLmRhdGEpXG4gICAgICAuam9pbignZycpXG4gICAgICAuY2xhc3NlZCgnYnViYmxlcycsIHRydWUpO1xuXG4gICAgYnViYmxlcy5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAuYXR0cignY3gnLCB4KDApKVxuICAgICAgLmF0dHIoJ2N5JywgeSgwKSlcbiAgICAgIC5hdHRyKCdyJywgZCA9PiB6KGQudG90YWxQb3B1bGF0aW9uICsgZC50b3RhbENvdW50cmllcyApICogLjIpXG4gICAgICAuYXR0cignZmlsbCcsIGQgPT4gY29sb3IoZC5uYW1lKSlcbiAgICAgIC5hdHRyKCdzdHJva2UnLCBkID0+IGNvbG9yKGQubmFtZSkpXG4gICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDcwMClcbiAgICAgICAgLmF0dHIoJ2N4JywgZCA9PiB4KGQudG90YWxDb3VudHJpZXMpKVxuICAgICAgICAuYXR0cignY3knLCBkID0+IHkoZC50b3RhbFBvcHVsYXRpb24pKVxuXG4gICAgYnViYmxlcy5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAuYXR0cignY3gnLCB4KDApKVxuICAgICAgLmF0dHIoJ2N5JywgeSgwKSlcbiAgICAgIC5hdHRyKCdyJywgZCA9PiB6KGQudG90YWxQb3B1bGF0aW9uICsgZC50b3RhbENvdW50cmllcykpXG4gICAgICAuYXR0cignZmlsbCcsICd0cmFuc3BhcmVudCcpXG4gICAgICAuYXR0cignc3Ryb2tlJywgZCA9PiBjb2xvcihkLm5hbWUpKVxuICAgICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDEuNSlcbiAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oNzAwKVxuICAgICAgICAuYXR0cignY3gnLCBkID0+IHgoZC50b3RhbENvdW50cmllcykpXG4gICAgICAgIC5hdHRyKCdjeScsIGQgPT4geShkLnRvdGFsUG9wdWxhdGlvbikpXG5cbiAgICBidWJibGVzLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgIC5hdHRyKCdjeCcsIHgoMCkpXG4gICAgICAuYXR0cignY3knLCB5KDApKVxuICAgICAgLmF0dHIoJ3InLCBkID0+IHooZC50b3RhbFBvcHVsYXRpb24gKyBkLnRvdGFsQ291bnRyaWVzKSlcbiAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBjb2xvcihkLm5hbWUpKVxuICAgICAgLmF0dHIoJ29wYWNpdHknLCAuNylcbiAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZCkgeyBkMy5zZWxlY3QodGhpcykuYXR0cignb3BhY2l0eScsIC42KSB9KVxuICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKGQpIHsgZDMuc2VsZWN0KHRoaXMpLmF0dHIoJ29wYWNpdHknLCAuNykgfSlcbiAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oNzAwKVxuICAgICAgICAuYXR0cignY3gnLCBkID0+IHgoZC50b3RhbENvdW50cmllcykpXG4gICAgICAgIC5hdHRyKCdjeScsIGQgPT4geShkLnRvdGFsUG9wdWxhdGlvbikpO1xuXG4gICAgYnViYmxlcy5hcHBlbmQoJ3RpdGxlJylcbiAgICAgIC50ZXh0KGQgPT4gYCR7ZC5uYW1lfS4gUG9wdWxhdGlvbjogJHt0aGlzLmZvcm1hdE51bWJlcnMoZC50b3RhbFBvcHVsYXRpb24pfS4gQ291bnRyaWVzOiAke2QudG90YWxDb3VudHJpZXN9YCk7XG4gIH1cbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJVGltZXpvbmUgfSBmcm9tICdAdHlwZXMnO1xuaW1wb3J0IFRpbWV6b25lc0QzQ2hhcnQgZnJvbSAnLi9UaW1lem9uZXNEM0NoYXJ0JztcblxuaW1wb3J0ICcuL3RpbWV6b25lcy1jaGFydC5zY3NzJztcbmltcG9ydCBDaGFydFdyYXBwZXIgZnJvbSAnQC9DaGFydFdyYXBwZXInO1xuXG5pbnRlcmZhY2UgSVRpbWV6b25lc0NoYXJ0UHJvcHMge1xuICBkYXRhOiBJVGltZXpvbmVbXTtcbn07XG5cbmNvbnN0IFRpbWV6b25lc0NoYXJ0OlJlYWN0LkZDPElUaW1lem9uZXNDaGFydFByb3BzPiA9ICh7IGRhdGEgfSkgPT4ge1xuICBjb25zdCBjaGFydEVsZW1lbnRSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBjaGFydEluc3RhbmNlUmVmID0gdXNlUmVmPFRpbWV6b25lc0QzQ2hhcnQgfCBudWxsPihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghY2hhcnRFbGVtZW50UmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGNvbnN0IGZvcm1hdHRlZERhdGEgPSBkYXRhLm1hcChkID0+IHtcbiAgICAgIGNvbnN0IHRvdGFsQ291bnRyaWVzID0gZC5jb3VudHJpZXMubGVuZ3RoO1xuICAgICAgY29uc3QgdG90YWxQb3B1bGF0aW9uID0gZC5jb3VudHJpZXMucmVkdWNlKCh0b3RhbCwgeCkgPT4gdG90YWwgKyB4LnBvcHVsYXRpb24sIDApO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogZC5uYW1lLFxuICAgICAgICB0b3RhbENvdW50cmllcyxcbiAgICAgICAgdG90YWxQb3B1bGF0aW9uXG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgY2hhcnRJbnN0YW5jZVJlZi5jdXJyZW50ID0gbmV3IFRpbWV6b25lc0QzQ2hhcnQoXG4gICAgICBjaGFydEVsZW1lbnRSZWYuY3VycmVudCxcbiAgICAgIGZvcm1hdHRlZERhdGEsXG4gICAgICB7XG4gICAgICAgIG1hcmdpbnM6IHsgdG9wOiA1MCwgcmlnaHQ6IDMwLCBib3R0b206IDgwLCBsZWZ0OiAxMDAgfVxuICAgICAgfVxuICAgIClcbiAgfSwgW2RhdGFdKVxuXG4gIHJldHVybiAoXG4gICAgPENoYXJ0V3JhcHBlciBjbGFzc05hbWVzPXtbXCJ0aW1lem9uZXMtY2hhcnRcIl19IHJlZj17Y2hhcnRFbGVtZW50UmVmfSAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGltZXpvbmVzQ2hhcnQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSAnQGFwb2xsby9yZWFjdC1ob29rcyc7XG5pbXBvcnQgVGl0bGUgZnJvbSAnQC9VSS9UaXRsZSc7XG5pbXBvcnQgeyBHRVRfVElNRVpPTkVTIH0gZnJvbSAnQHF1ZXJpZXMnO1xuaW1wb3J0IHsgSVRpbWV6b25lIH0gZnJvbSAnQHR5cGVzJztcbmltcG9ydCBMYW5ndWFnZXNDaGFydCBmcm9tICdAL0NoYXJ0cy9UaW1lem9uZXNDaGFydCc7XG5pbXBvcnQgUHJlbG9hZCBmcm9tICdAL1VJL1ByZWxvYWQnO1xuXG5pbnRlcmZhY2UgSVRpbWV6b25lc0RhdGEge1xuICBUaW1lem9uZTogSVRpbWV6b25lW107XG59XG5cbmNvbnN0IFRpbWV6b25lc1BhZ2U6UmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgZGF0YSwgbG9hZGluZyB9ID0gdXNlUXVlcnk8SVRpbWV6b25lc0RhdGE+KEdFVF9USU1FWk9ORVMpO1xuICByZXR1cm4gKFxuICAgIDxzZWN0aW9uPlxuICAgICAgPFRpdGxlPk51bWJlciBvZiBjb3VudHJpZXMgYW5kIHRvdGFsIHBvcHVsYXRpb24gaW4gZWFjaCB0aW1lem9uZTwvVGl0bGU+XG4gICAgICB7IChsb2FkaW5nICYmICFkYXRhKSAmJiA8UHJlbG9hZCAvPiB9XG4gICAgICB7IGRhdGEgJiYgPExhbmd1YWdlc0NoYXJ0IGRhdGE9e2RhdGEuVGltZXpvbmV9IC8+IH1cbiAgICA8L3NlY3Rpb24+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUaW1lem9uZXNQYWdlOyJdLCJzb3VyY2VSb290IjoiIn0=