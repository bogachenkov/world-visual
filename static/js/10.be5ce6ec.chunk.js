(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{372:function(t,n,e){"use strict";var r=e(1),a=e.n(r);e(373);n.a=function(t){var n=t.children;return a.a.createElement("h2",{className:"title"},n)}},373:function(t,n,e){},375:function(t,n,e){"use strict";e.d(n,"e",(function(){return h})),e.d(n,"d",(function(){return g})),e.d(n,"b",(function(){return y})),e.d(n,"f",(function(){return m})),e.d(n,"c",(function(){return v})),e.d(n,"a",(function(){return b}));var r=e(103);function a(){var t=d(['\n  query getRegions {\n    Region(filter: { name_not: "Polar" }) {\n      _id,\n      name,\n      subregions {\n        _id\n        name\n        countries(filter: { population_gt: 1 }) {\n          _id,\n          population\n        }\n      }\n    }\n  }\n']);return a=function(){return t},t}function i(){var t=d(['\n  query getCountryBorders {\n    Country(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n      ...CountryData,\n      alpha3Code,\n      borders {\n        alpha3Code\n      }\n    }\n  }\n  ',"\n"]);return i=function(){return t},t}function o(){var t=d(['\n  query getTimezones {\n    Timezone {\n      _id,\n      name,\n      countries(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n        _id,\n        population\n      }\n    }\n  }\n']);return o=function(){return t},t}function u(){var t=d(['\n  query getCountriesArea {\n    Country(filter: { area_lt: 1500000, population_gt: 1, capital_not: "" }) {\n      ...CountryData,\n      area\n    }\n  }\n  ',"\n"]);return u=function(){return t},t}function c(){var t=d(['\n  query getCountriesDensity {\n      Country(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n      ...CountryData\n      alpha3Code,\n      density: populationDensity,\n      population,\n      area\n    }\n  }\n  ',"\n"]);return c=function(){return t},t}function s(){var t=d(["\n  query getCountriesByPopulation($orderBy:[_CountryOrdering]) {\n    Country(orderBy: $orderBy, first: 10, filter: { population_gte: 1 }) {\n      ...CountryData\n      population,\n      populationDensity\n    }\n  }\n  ","\n"]);return s=function(){return t},t}function l(){var t=d(["\n  query getCountryByName($name: String) {\n    Country(name: $name) {\n      area,\n      demonym,\n      name,\n      nativeName,\n      numericCode,\n      capital,\n      officialLanguages {\n        name\n      }\n      population,\n      populationDensity,\n      subregion {\n        name\n      },\n      borders {\n        name\n      }\n      timezones {\n        name\n      }\n    }\n  }\n"]);return l=function(){return t},t}function f(){var t=d(["\n  fragment CountryData on Country {\n    _id,\n    name\n  }\n"]);return f=function(){return t},t}function d(t,n){return n||(n=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(n)}}))}var p=Object(r.b)(f()),h=(Object(r.b)(l()),Object(r.b)(s(),p)),g=Object(r.b)(c(),p),y=Object(r.b)(u(),p),m=Object(r.b)(o()),v=Object(r.b)(i(),p),b=Object(r.b)(a())},376:function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(374);function a(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var o=function(){function t(n,e,a){var o=e.margins,u=e.height,c=e.width;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),i(this,"svg",void 0),i(this,"margins",void 0),i(this,"width",void 0),i(this,"height",void 0),i(this,"xAxisGroup",void 0),i(this,"yAxisGroup",void 0),this.margins=o;var s=c||n.clientWidth,l=u||n.clientHeight,f=Math.max(s,1100),d=Math.max(l,a?1100:700);this.width=f-this.margins.left-this.margins.right,this.height=d-this.margins.top-this.margins.bottom,this.svg=r.r(n).append("svg").attr("viewBox","0 0 ".concat(f," ").concat(d)).attr("preserveAspectRatio","xMinYMin meet").append("g"),this.centerChart()}var n,e,o;return n=t,(e=[{key:"addAxisGroups",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t&&(this.xAxisGroup=this.svg.append("g").classed("axis-group",!0).classed("x-axis-group",!0).attr("transform","translate(0, ".concat(this.height,")"))),n&&(this.yAxisGroup=this.svg.append("g").classed("axis-group",!0).classed("y-axis-group",!0))}},{key:"centerChart",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.margins.left,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.margins.top;this.svg.attr("transform","translate(".concat(t,", ").concat(n,")"))}},{key:"wrap",value:function(t,n){t.each((function(){for(var t,e=r.r(this),a=e.text().split(/\s+/).reverse(),i=[],o=0,u=e.attr("y"),c=parseFloat(e.attr("dy")),s=e.text(null).append("tspan").attr("x",0).attr("y",u).attr("dy",c+"em");t=a.pop();)i.push(t),s.text(i.join(" ")),s.node().getComputedTextLength()>n&&(i.pop(),s.text(i.join(" ")),i=[t],s=e.append("tspan").attr("x",0).attr("y",u).attr("dy","".concat(1.1*++o+c,"em")).text(t))}))}},{key:"degToRad",value:function(t){return t*Math.PI/180}},{key:"radToDeg",value:function(t){return 180*t/Math.PI}}])&&a(n.prototype,e),o&&a(n,o),t}()},377:function(t,n,e){"use strict";var r=e(1),a=e.n(r),i=(e(378),Object(r.forwardRef)((function(t,n){var e=t.children,r=t.classNames,i=void 0===r?[]:r;return a.a.createElement("div",{ref:n,className:"chart-wrapper ".concat(i.join(" "))},e)})));n.a=i},378:function(t,n,e){},491:function(t,n,e){"use strict";e.r(n);var r=e(1),a=e.n(r),i=e(370),o=e(372),u=e(375),c=e(374);function s(t){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t){return function(t){if(Array.isArray(t))return f(t)}(t)||function(t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,n){if(!t)return;if("string"===typeof t)return f(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return f(t,n)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function d(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function p(t,n){return(p=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function h(t){var n=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var e,r=m(t);if(n){var a=m(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return g(this,e)}}function g(t,n){return!n||"object"!==s(n)&&"function"!==typeof n?y(t):n}function y(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function m(t){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function v(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var b=function(t){!function(t,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&p(t,n)}(i,t);var n,e,r,a=h(i);function i(t,n,e){var r;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,i),(r=a.call(this,t,e)).data=n,v(y(r),"radius",void 0),v(y(r),"colors",["#02c4de","#02b3ca","#02a1b6","#028ea1","#038198","#04738f","#045676","#044862","#03394e","#033447"]),v(y(r),"totalValue",void 0),r.radius=Math.min(r.width,r.height)/2-r.margins.top,r.centerChart(r.width/2+r.margins.left,r.height/2+r.margins.top),r.update(),r}return n=i,(e=[{key:"reduceCountries",value:function(t){return t.reduce((function(t,n){return t+n.population}),0)}},{key:"formatData",value:function(){var t=this,n=this.data.map((function(n){var e=n.subregions.reduce((function(n,e){return n+t.reduceCountries(e.countries)}),0);return{name:n.name,value:e}}));this.totalValue=n.reduce((function(t,n){return t+n.value}),0);var e=n.findIndex((function(t){return"Oceania"===t.name})),r=n.findIndex((function(t){return"Africa"===t.name})),a=n.splice(r,1)[0];n.splice(e,0,a);var i=n.find((function(t){return"Americas"===t.name}));return[].concat(l(n.filter((function(t){return"Americas"!==t.name}))),[{name:"North America",value:.58*i.value},{name:"South America",value:.42*i.value}])}},{key:"update",value:function(){var t=this,n=c.p().domain(this.data.map((function(t){return t.name}))).range(this.colors),e=c.l().sort(null).value((function(t){return t.value})).startAngle(this.degToRad(15)).endAngle(this.degToRad(375))(this.formatData()),r=c.a().innerRadius(.5*this.radius).outerRadius(.8*this.radius),a=c.a().innerRadius(.9*this.radius).outerRadius(.9*this.radius);this.svg.selectAll("path").data(e).join("path").attr("fill",(function(t){return n(t.data.name)})).transition().duration(500).attrTween("d",(function(t){var n=c.i(t.startAngle+.1,t.endAngle);return function(e){return t.endAngle=n(e),r(t)}})).attr("stroke","#edf1f4").style("stroke-width","2px"),this.svg.selectAll("circle").data(e).join("circle").attr("fill","#597a95").attr("cx",(function(t){return r.centroid(t)[0]})).attr("cy",(function(t){return r.centroid(t)[1]})).attr("r",3),this.svg.selectAll("polyline").data(e).join("polyline").attr("stroke","#597a95").attr("fill","none").attr("stroke-width",1).attr("opacity",0).attr("points",(function(n){n.data.name,n.startAngle,Math.PI,n.endAngle,Math.PI;var e=r.centroid(n),i=a.centroid(n),o=a.centroid(n),u=n.startAngle+(n.endAngle-n.startAngle)/2;return u>2*Math.PI&&(u-=2*Math.PI),o[0]=1.25*t.radius*(u<Math.PI?1:-1),[e,i,o]})).transition().duration(500).attr("opacity",1),this.svg.selectAll("text.percentage").data(e).join("text").classed("percentage",!0).text((function(n){return"".concat((n.data.value/t.totalValue*100).toFixed(1),"%")})).attr("font-size",18).attr("font-weight",700).attr("fill","#355c7d").style("text-anchor",(function(t){var n=t.startAngle+(t.endAngle-t.startAngle)/2;return n>2*Math.PI&&(n-=2*Math.PI),n<Math.PI?"end":"start"})).attr("opacity",0).transition().duration(500).attr("transform",(function(n){var e=a.centroid(n),r=n.startAngle+(n.endAngle-n.startAngle)/2;return r>2*Math.PI&&(r-=2*Math.PI),e[0]=1.25*t.radius*(r<Math.PI?1:-1),e[1]=e[1]-5,"translate("+e+")"})).attr("opacity",1),this.svg.selectAll("text.name").data(e).join("text").classed("name",!0).text((function(t){return t.data.name})).attr("font-size",12).attr("fill","#355c7d").attr("font-weight",600).style("text-transform","uppercase").style("text-anchor",(function(t){var n=t.startAngle+(t.endAngle-t.startAngle)/2;return n>2*Math.PI&&(n-=2*Math.PI),n<Math.PI?"end":"start"})).attr("opacity",0).transition().duration(500).attr("transform",(function(n){var e=a.centroid(n),r=n.startAngle+(n.endAngle-n.startAngle)/2;return r>2*Math.PI&&(r-=2*Math.PI),e[0]=1.25*t.radius*(r<Math.PI?1:-1),e[1]=e[1]+20,"translate("+e+")"})).attr("opacity",1)}}])&&d(n.prototype,e),r&&d(n,r),i}(e(376).a),A=e(377),x=function(t){var n=t.data,e=Object(r.useRef)(null),i=Object(r.useRef)(null);return Object(r.useEffect)((function(){e.current&&(i.current=new b(e.current,n,{margins:{top:50,right:50,bottom:50,left:50}}))}),[n]),a.a.createElement(A.a,{ref:e})},j=e(60);n.default=function(){var t=Object(i.a)(u.a),n=t.data,e=t.loading;return a.a.createElement("section",null,a.a.createElement(o.a,null,"World population by Continents"),e&&!n&&a.a.createElement(j.a,null),n&&a.a.createElement(x,{data:n.Region}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,