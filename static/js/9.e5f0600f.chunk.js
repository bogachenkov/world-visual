(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{372:function(t,n,e){"use strict";var r=e(1),o=e.n(r);e(373);n.a=function(t){var n=t.children;return o.a.createElement("h2",{className:"title"},n)}},373:function(t,n,e){},375:function(t,n,e){"use strict";e.d(n,"e",(function(){return h})),e.d(n,"d",(function(){return g})),e.d(n,"b",(function(){return y})),e.d(n,"f",(function(){return m})),e.d(n,"c",(function(){return v})),e.d(n,"a",(function(){return b}));var r=e(103);function o(){var t=p(['\n  query getRegions {\n    Region(filter: { name_not: "Polar" }) {\n      _id,\n      name,\n      subregions {\n        _id\n        name\n        countries(filter: { population_gt: 1 }) {\n          _id,\n          population\n        }\n      }\n    }\n  }\n']);return o=function(){return t},t}function a(){var t=p(['\n  query getCountryBorders {\n    Country(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n      ...CountryData,\n      alpha3Code,\n      borders {\n        alpha3Code\n      }\n    }\n  }\n  ',"\n"]);return a=function(){return t},t}function i(){var t=p(['\n  query getTimezones {\n    Timezone {\n      _id,\n      name,\n      countries(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n        _id,\n        population\n      }\n    }\n  }\n']);return i=function(){return t},t}function u(){var t=p(['\n  query getCountriesArea {\n    Country(filter: { area_lt: 1500000, population_gt: 1, capital_not: "" }) {\n      ...CountryData,\n      area\n    }\n  }\n  ',"\n"]);return u=function(){return t},t}function c(){var t=p(['\n  query getCountriesDensity {\n      Country(filter: { area_gt: 1, population_gt: 1, capital_not: "" }) {\n      ...CountryData\n      alpha3Code,\n      density: populationDensity,\n      population,\n      area\n    }\n  }\n  ',"\n"]);return c=function(){return t},t}function s(){var t=p(["\n  query getCountriesByPopulation($orderBy:[_CountryOrdering]) {\n    Country(orderBy: $orderBy, first: 10, filter: { population_gte: 1 }) {\n      ...CountryData\n      population,\n      populationDensity\n    }\n  }\n  ","\n"]);return s=function(){return t},t}function l(){var t=p(["\n  query getCountryByName($name: String) {\n    Country(name: $name) {\n      area,\n      demonym,\n      name,\n      nativeName,\n      numericCode,\n      capital,\n      officialLanguages {\n        name\n      }\n      population,\n      populationDensity,\n      subregion {\n        name\n      },\n      borders {\n        name\n      }\n      timezones {\n        name\n      }\n    }\n  }\n"]);return l=function(){return t},t}function f(){var t=p(["\n  fragment CountryData on Country {\n    _id,\n    name\n  }\n"]);return f=function(){return t},t}function p(t,n){return n||(n=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(n)}}))}var d=Object(r.b)(f()),h=(Object(r.b)(l()),Object(r.b)(s(),d)),g=Object(r.b)(c(),d),y=Object(r.b)(u(),d),m=Object(r.b)(i()),v=Object(r.b)(a(),d),b=Object(r.b)(o())},376:function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(374);function o(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var i=function(){function t(n,e,o){var i=e.margins,u=e.height,c=e.width;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"svg",void 0),a(this,"margins",void 0),a(this,"width",void 0),a(this,"height",void 0),a(this,"xAxisGroup",void 0),a(this,"yAxisGroup",void 0),this.margins=i;var s=c||n.clientWidth,l=u||n.clientHeight,f=Math.max(s,1100),p=Math.max(l,o?1100:700);this.width=f-this.margins.left-this.margins.right,this.height=p-this.margins.top-this.margins.bottom,this.svg=r.r(n).append("svg").attr("viewBox","0 0 ".concat(f," ").concat(p)).attr("preserveAspectRatio","xMinYMin meet").append("g"),this.centerChart()}var n,e,i;return n=t,(e=[{key:"addAxisGroups",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t&&(this.xAxisGroup=this.svg.append("g").classed("axis-group",!0).classed("x-axis-group",!0).attr("transform","translate(0, ".concat(this.height,")"))),n&&(this.yAxisGroup=this.svg.append("g").classed("axis-group",!0).classed("y-axis-group",!0))}},{key:"centerChart",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.margins.left,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.margins.top;this.svg.attr("transform","translate(".concat(t,", ").concat(n,")"))}},{key:"wrap",value:function(t,n){t.each((function(){for(var t,e=r.r(this),o=e.text().split(/\s+/).reverse(),a=[],i=0,u=e.attr("y"),c=parseFloat(e.attr("dy")),s=e.text(null).append("tspan").attr("x",0).attr("y",u).attr("dy",c+"em");t=o.pop();)a.push(t),s.text(a.join(" ")),s.node().getComputedTextLength()>n&&(a.pop(),s.text(a.join(" ")),a=[t],s=e.append("tspan").attr("x",0).attr("y",u).attr("dy","".concat(1.1*++i+c,"em")).text(t))}))}},{key:"degToRad",value:function(t){return t*Math.PI/180}},{key:"radToDeg",value:function(t){return 180*t/Math.PI}}])&&o(n.prototype,e),i&&o(n,i),t}()},377:function(t,n,e){"use strict";var r=e(1),o=e.n(r),a=(e(378),Object(r.forwardRef)((function(t,n){var e=t.children,r=t.classNames,a=void 0===r?[]:r;return o.a.createElement("div",{ref:n,className:"chart-wrapper ".concat(a.join(" "))},e)})));n.a=a},378:function(t,n,e){},490:function(t,n,e){"use strict";e.r(n);var r=e(1),o=e.n(r),a=e(370),i=e(372),u=e(375),c=e(374);function s(t){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,n){return(f=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function p(t){var n=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var e,r=g(t);if(n){var o=g(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return d(this,e)}}function d(t,n){return!n||"object"!==s(n)&&"function"!==typeof n?h(t):n}function h(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function g(t){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function y(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var m=function(t){!function(t,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&f(t,n)}(a,t);var n,e,r,o=p(a);function a(t,n,e){var r;return function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,a),(r=o.call(this,t,e,t.clientHeight>t.clientWidth)).data=n,y(h(r),"radius",void 0),y(h(r),"getNameByIndex",new Map),y(h(r),"color","#033447"),y(h(r),"chordColor","#045676"),r.radius=Math.min(r.height,r.width)/2.6,r.centerChart(r.width/2+r.margins.left,r.height/2+r.margins.top),r.svg.style("opacity",.1),r.update(),r}return n=a,(e=[{key:"createMatrix",value:function(){var t=this,n=this.data.filter((function(t){return t.borders.length>0}));return n.map((function(n,e){return t.getNameByIndex.set(e,n.name)})),n.map((function(t){var e=t.borders.map((function(t){return t.alpha3Code}));return n.map((function(t){return e.includes(t.alpha3Code)?1:0}))}))}},{key:"update",value:function(){var t=this,n=c.d().padAngle(.05).sortSubgroups(c.e).sortChords(c.e)(this.createMatrix()),e=c.a().innerRadius(this.radius).outerRadius(this.radius+2),r=c.m().radius(this.radius),o=this.svg.append("g").selectAll("g").data(n.groups).join("g"),a=function(n){o.filter((function(t){return t.index!==n.index})).style("opacity",.65),t.svg.selectAll(".chord").filter((function(t){return t.source.index!==n.index&&t.target.index!==n.index})).style("opacity",.1)},i=function(){o.style("opacity",1),t.svg.selectAll(".chord").style("opacity",1)};o.append("path").attr("fill",this.color).attr("stroke",this.color).attr("d",e).on("mouseover",a).on("mouseout",i),o.append("text").each((function(t){t.angle=(t.startAngle+t.endAngle)/2})).attr("dy",".35em").attr("transform",(function(n){return"\n        rotate(".concat(180*n.angle/Math.PI-90,")\n        translate(").concat(t.radius+10,")\n        ").concat(n.angle>Math.PI?"rotate(180)":"","\n      ")})).attr("text-anchor",(function(t){return t.angle>Math.PI?"end":null})).attr("font-size",10).attr("fill",this.color).text((function(n){return t.getNameByIndex.get(n.index)})).on("mouseover",a).on("mouseout",i),this.svg.append("g").attr("fill-opacity",.67).selectAll(".chord").data(n).join("path").classed("chord",!0).attr("stroke",this.chordColor).attr("fill",this.chordColor).attr("d",r).on("mouseover",(function(t){return a(t.source)})).on("mouseout",i),this.svg.transition().duration(600).style("opacity",1)}}])&&l(n.prototype,e),r&&l(n,r),a}(e(376).a),v=e(377),b=function(t){var n=t.data,e=Object(r.useRef)(null),a=Object(r.useRef)(null);return Object(r.useEffect)((function(){e.current&&(a.current=new m(e.current,n,{margins:{top:50,right:50,bottom:50,left:50}}))}),[n]),o.a.createElement(v.a,{ref:e})},x=e(60);n.default=function(){var t=Object(a.a)(u.c),n=t.data,e=t.loading;return o.a.createElement("section",null,o.a.createElement(i.a,null,"Countries by borders. chord diagram"),e&&!n&&o.a.createElement(x.a,null),n&&o.a.createElement(b,{data:n.Country}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,